"var Component=(()=>{var g=Object.create;var a=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var f=Object.getPrototypeOf,y=Object.prototype.hasOwnProperty;var w=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),b=(t,e)=>{for(var r in e)a(t,r,{get:e[r],enumerable:!0})},l=(t,e,r,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of m(e))!y.call(t,o)&&o!==r&&a(t,o,{get:()=>e[o],enumerable:!(i=u(e,o))||i.enumerable});return t};var v=(t,e,r)=>(r=t!=null?g(f(t)):{},l(e||!t||!t.__esModule?a(r,\"default\",{value:t,enumerable:!0}):r,t)),x=t=>l(a({},\"__esModule\",{value:!0}),t);var c=w((S,s)=>{s.exports=_jsx_runtime});var k={};b(k,{default:()=>p});var n=v(c());function h(t){let e={a:\"a\",code:\"code\",em:\"em\",h2:\"h2\",h3:\"h3\",hr:\"hr\",li:\"li\",ol:\"ol\",p:\"p\",pre:\"pre\",strong:\"strong\",ul:\"ul\",...t.components},{Callout:r,Tweet:i}=e;return r||d(\"Callout\",!0),i||d(\"Tweet\",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:\"I updated my blog this weekend and wanted to share some thoughts along the way:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.a,{href:\"#content-management\",children:\"Content Management\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"#retrieving-content\",children:\"Retrieving Content\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"#remark-and-rehype\",children:\"Remark and Rehype\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"#dependency-minimalism\",children:\"Dependency Minimalism\"})}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.a,{href:\"#performance\",children:\"Performance\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"#server-components\",children:\"Server Components\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"#partial-prerendering\",children:\"Partial Prerendering\"})}),`\n`]}),`\n`]}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"#opinions\",children:\"Opinions\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"#conclusion\",children:\"Conclusion\"})}),`\n`]}),`\n`,(0,n.jsx)(r,{emoji:\"\\u26A0\\uFE0F\",children:(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Disclaimer:\"}),\" My site is my \\u201Cbreakable toy\\u201D. I enjoy and \",(0,n.jsx)(e.em,{children:\"intentionally\"}),\" change technology and try new patterns here. I'd encourage you to do the same and then write about why you made those choices.\"]})}),`\n`,(0,n.jsx)(e.h2,{children:\"Content Management\"}),`\n`,(0,n.jsx)(e.p,{children:\"I've moved my content from HTML to vanilla Markdown, to MDX, to a CMS, and back to MDX over the years. My content requirements as of now are:\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Written in Markdown\\xB9\"}),`\n`,(0,n.jsx)(e.li,{children:\"Support for syntax highlighting, embedded tweets, and other components\"}),`\n`,(0,n.jsx)(e.li,{children:\"Managed through version control\\xB2\"}),`\n`,(0,n.jsx)(e.li,{children:\"Minimal external dependencies\"}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"My goal was to simplify without giving up too many features.\"}),`\n`,(0,n.jsx)(e.h3,{children:\"Retrieving Content\"}),`\n`,(0,n.jsx)(i,{id:\"1793666719552065850\"}),`\n`,(0,n.jsx)(e.p,{children:\"You can go surprisingly far with just Node.js and JavaScript. You'll notice a theme start to emerge in this blog post: fewer dependencies, and more copy/paste-able code.\"}),`\n`,(0,n.jsx)(e.p,{children:\"I removed the following libraries:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.code,{children:\"contentlayer\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.code,{children:\"next-contentlayer\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.code,{children:\"rehype-autolink-headings\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.code,{children:\"rehype-pretty-code\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.code,{children:\"rehype-slug\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.code,{children:\"remark-gfm\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.code,{children:\"shiki\"})}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"I was still able to maintain almost all of my content requirements with not much code. For example, here's how I'm able to retrieve all of my blog posts:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`import path from 'path'\nimport fs from 'fs'\n\nfunction getMDXFiles(dir) {\n  return fs.readdirSync(dir).filter((file) => path.extname(file) === '.mdx')\n}\n\nfunction readMDXFile(filePath) {\n  let rawContent = fs.readFileSync(filePath, 'utf-8')\n  return parseFrontmatter(rawContent)\n}\n\nfunction getMDXData(dir) {\n  let mdxFiles = getMDXFiles(dir)\n  return mdxFiles.map((file) => {\n    let { metadata, content } = readMDXFile(path.join(dir, file))\n    let slug = path.basename(file, path.extname(file))\n    return {\n      metadata,\n      slug,\n      content,\n    }\n  })\n}\n\nexport function getBlogPosts() {\n  return getMDXData(path.join(process.cwd(), 'content'))\n}\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"That's not too bad. So what am I missing? Well, Contentlayer gives you Fast Refresh for your content. That's nice. You can \",(0,n.jsx)(e.a,{href:\"https://github.com/gaearon/overreacted.io/pull/797\",children:\"workaround this\"}),\" or just use \",(0,n.jsx)(e.code,{children:\"@next/mdx\"}),\", which I might do. Contentlayer has other features, too, but they're unnecessary for my blog.\"]}),`\n`,(0,n.jsx)(e.h3,{children:\"Remark and Rehype\"}),`\n`,(0,n.jsx)(e.p,{children:\"What about the AST modifications for auto-linking headings, adding IDs, and supporting syntax highlighting? I don't know why I didn't think of this before, but you can just\\u2026 use React components.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`import { highlight } from 'sugar-high' // 1KB new dependency\n\n// This replaces rehype-pretty-code and shiki\nfunction Code({ children, ...props }) {\n  let codeHTML = highlight(children)\n  return <code dangerouslySetInnerHTML={{ __html: codeHTML }} {...props} />\n}\n\n// This replaces rehype-slug\nfunction slugify(str) {\n  return str\n    .toString()\n    .toLowerCase()\n    .trim() // Remove whitespace from both ends of a string\n    .replace(/\\\\s+/g, '-') // Replace spaces with -\n    .replace(/&/g, '-and-') // Replace & with 'and'\n    .replace(/[^\\\\w\\\\-]+/g, '') // Remove all non-word characters except for -\n    .replace(/\\\\-\\\\-+/g, '-') // Replace multiple - with single -\n}\n\n// This replaces rehype-autolink-headings\nfunction createHeading(level) {\n  return ({ children }) => {\n    let slug = slugify(children)\n    return React.createElement(\n      \\`h\\${level}\\`,\n      { id: slug },\n      [\n        React.createElement('a', {\n          href: \\`#\\${slug}\\`,\n          key: \\`link-\\${slug}\\`,\n          className: 'anchor',\n        }),\n      ],\n      children\n    )\n  }\n}\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Oh and that \",(0,n.jsx)(e.code,{children:\"remark-gfm\"}),\" I was using for the GitHub style Markdown tables? Again, you can use a React component for that.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`function Table({ data }) {\n  let headers = data.headers.map((header, index) => (\n    <th key={index}>{header}</th>\n  ))\n  let rows = data.rows.map((row, index) => (\n    <tr key={index}>\n      {row.map((cell, cellIndex) => (\n        <td key={cellIndex}>{cell}</td>\n      ))}\n    </tr>\n  ))\n\n  return (\n    <table>\n      <thead>\n        <tr>{headers}</tr>\n      </thead>\n      <tbody>{rows}</tbody>\n    </table>\n  )\n}\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"Dependency Minimalism\"}),`\n`,(0,n.jsx)(e.p,{children:\"Why go through all of this work to delete dependencies?\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"After having a blog for 10 years, I've gained a new appreciation for keeping things simple. Now, I'm not going \",(0,n.jsx)(e.em,{children:\"full\"}),\" minimalist here. I still want nice things. But I'm taking more opportunities to simplify and keep more code managed in the repo.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Shoutout to \",(0,n.jsx)(e.a,{href:\"https://github.com/hashicorp/next-mdx-remote\",children:\"next-mdx-remote\"}),\" and \",(0,n.jsx)(e.a,{href:\"https://react-tweet.vercel.app/\",children:\"react-tweet\"}),\".\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"Performance\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Earlier this year, I moved this blog to the \",(0,n.jsx)(e.a,{href:\"https://nextjs.org/docs/app\",children:\"Next.js App Router\"}),\". That came with a subtle but important change: \",(0,n.jsx)(e.a,{href:\"https://nextjs.org/docs/app/building-your-application/rendering/server-components\",children:\"React Server Components\"}),\" by default.\"]}),`\n`,(0,n.jsx)(e.h3,{children:\"Server Components\"}),`\n`,(0,n.jsx)(e.p,{children:\"Server Components are fun. For example, I can embed tweets inside blog posts:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`<Tweet id=\"1457032789883187201\" />\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"Tweet\"}),\" component handles both data fetching \",(0,n.jsx)(e.em,{children:\"and\"}),\" creating UI, all bundled up in a handy npm package (worth an exception here). Notably, additional Server Components added to my pages aren't increasing the client-side JavaScript bundle. This \\u201Ctemplating\\u201D remains server-only.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Another example is on \",(0,n.jsx)(e.a,{href:\"https://arifin.xyz/work\",children:\"my work page\"}),\". I love that I can drop this component in anywhere:\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`async function Stars() {\n  let res = await fetch('https://api.github.com/repos/vercel/next.js')\n  let json = await res.json()\n  let count = Math.round(json.stargazers_count / 1000)\n  return \\`\\${count}k stars\\`\n}\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"Partial Prerendering\"}),`\n`,(0,n.jsx)(e.p,{children:\"We're also working on something new in Next.js I'm now using here. It enables Next.js to prerender as much of the page as possible to static, leaving holes for dynamic components.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"For example, 98% of this blog post page is work that can be prerendering during the build. However, those view counts at the top of the page should be dynamic on every request. With \",(0,n.jsx)(e.a,{href:\"https://www.partialprerendering.com/\",children:\"Partial Prerendering\"}),\", the code for that looks like:\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-tsx\",children:`async function Views({ slug }: { slug: string }) {\n  let views = await getViewsCount()\n  incrementViews(slug)\n  // ...\n}\n\nexport default function Blog({ params }) {\n  let post = getBlogPosts().find((post) => post.slug === params.slug)\n  // ...\n\n  return (\n    <section>\n      <Suspense fallback={<p className=\"h-5\" />}>\n        <Views slug={post.slug} />\n      </Suspense>\n      <article>{post.content}</article>\n    </section>\n  )\n}\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Everything up to the \",(0,n.jsx)(e.code,{children:\"Suspense\"}),\" boundary, including the \",(0,n.jsx)(e.code,{children:\"fallback\"}),\", can be prerendered. Then, when the request happens, the static shell is instantly shown, followed by the dynamic content (views) streaming in after the fact.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"getViewsCount\"}),\" signals to Next.js that it's dynamic through \",(0,n.jsx)(e.code,{children:\"noStore()\"}),\":\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`export async function getViewsCount() {\n  noStore();\n  let data = await sql\\`\n    SELECT slug, count\n    FROM views\n  \\`;\n\n  return data.rows as { slug: string; count: number }[];\n}\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"And \",(0,n.jsx)(e.code,{children:\"incrementViews\"}),\" is a Server Action that can be called like any JavaScript function:\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`'use server';\n\nimport { sql } from '@vercel/postgres';\n\nexport async function increment(slug: string) {\n  await sql\\`\n    INSERT INTO views (slug, count)\n    VALUES (\\${slug}, 1)\n    ON CONFLICT (slug)\n    DO UPDATE SET count = views.count + 1\n  \\`;\n}\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"I'm really happy with this approach. In the past, I had to include more dependencies like \",(0,n.jsx)(e.code,{children:\"swr\"}),\" and add additional client-side JavaScript to achieve this. Partial Prerendering feels fast, without giving up the dynamic view counts that I love.\"]}),`\n`,(0,n.jsx)(i,{id:\"1793468417800102148\"}),`\n`,(0,n.jsx)(e.h2,{children:\"Opinions\"}),`\n`,(0,n.jsx)(e.p,{children:\"There's an assortment of other opinions I've included here now:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsxs)(e.strong,{children:[\"Prefer \",(0,n.jsx)(e.code,{children:\"let\"}),\" over \",(0,n.jsx)(e.code,{children:\"const\"}),\":\"]}),\" It's fewer characters to write. I'm lazy. Also, this isn't a production codebase here or anything. \",(0,n.jsx)(e.a,{href:\"https://overreacted.io/on-let-vs-const/\",children:\"Nice post here\"}),\" on this topic.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Prefer copy/paste over the wrong abstraction:\"}),\" I removed \",(0,n.jsx)(e.code,{children:\"date-fns\"}),\", \",(0,n.jsx)(e.code,{children:\"clsx\"}),\" / \",(0,n.jsx)(e.code,{children:\"classnames\"}),\", and \",(0,n.jsx)(e.code,{children:\"gray-matter\"}),\" for simple copy-pastable alternatives. Sure, they don't support every single feature. But, I don't need it. And if I do later, maybe I'll bring it back.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Prefer loading SVGs as images:\"}),\" Okay, this one has been hard for me. I've gotten so used to inlining SVGs in React. But starting to change my mind. \",(0,n.jsx)(e.a,{href:\"https://kurtextrem.de/posts/svg-in-js\",children:\"Related reading here\"}),\" and \",(0,n.jsx)(e.a,{href:\"https://benadam.me/thoughts/react-svg-sprites/\",children:\"on svg sprites\"}),\".\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Prefer larger files versus many components:\"}),\" Just works for my brain better. Keep code that changes often close together. Your mileage may vary.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsxs)(e.strong,{children:[\"Prefer colocating most things in \",(0,n.jsx)(e.code,{children:\"app/\"}),\":\"]}),\" Because, \",(0,n.jsx)(e.em,{children:\"why not\"}),\"? Now that it's possible with the App Router I'm probably overusing this, but it feels nice.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Prefer colocating styles with components:\"}),\" Okay, I've been using Tailwind now for many years, but this is still worth mentioning. Similar to my content evolution, I went from CSS \\u2192 Sass \\u2192 styled-components \\u2192 Chakra \\u2192 Tailwind. \",(0,n.jsx)(e.a,{href:\"https://adamwathan.me/css-utility-classes-and-separation-of-concerns\",children:\"Give it a shot\"}),\". P.S. LLMs are very good at Tailwind.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Conclusion\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"As always, my entire site is \",(0,n.jsx)(e.a,{href:\"https://github.com/mustaqimarifin/arifin.xyz\",children:\"open source\"}),\". Feel free to fork it and hack around.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"I've also simplified the cloning process by consolidating everything to a single \",(0,n.jsx)(e.a,{href:\"https://vercel.com/storage/postgres\",children:\"Postgres database\"}),\". It's now where blog views, guestbook entries, and redirects are stored. I still like MySQL, just wanted an excuse to use Vercel Postgres more.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"See you next year for the 2024 blog refresh \\u{1FAE1}\"}),`\n`,(0,n.jsx)(e.hr,{}),`\n`,(0,n.jsx)(e.p,{children:\"\\xB9: Even when I moved to a CMS, I was still writing in MDX. For my developer blog, it's by far the easiest for me to maintain. I've gone the opposite route with custom components backed by a CMS on larger projects, but has always felt unnecessary here.\"}),`\n`,(0,n.jsx)(e.p,{children:\"\\xB2: Surprisingly, there still aren't many great git-like workflows for content that I've enjoyed using. Again, for my blog, having the complete version history tracked in git has been very helpful.\"})]})}function p(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,{...t,children:(0,n.jsx)(h,{...t})}):h(t)}function d(t,e){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+t+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return x(k);})();\n;return Component;"