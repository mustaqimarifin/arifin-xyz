[
  {
    "content": "var Component=(()=>{var p=Object.create;var i=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var w=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),b=(t,e)=>{for(var r in e)i(t,r,{get:e[r],enumerable:!0})},o=(t,e,r,s)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of m(e))!f.call(t,a)&&a!==r&&i(t,a,{get:()=>e[a],enumerable:!(s=u(e,a))||s.enumerable});return t};var y=(t,e,r)=>(r=t!=null?p(g(t)):{},o(e||!t||!t.__esModule?i(r,\"default\",{value:t,enumerable:!0}):r,t)),v=t=>o(i({},\"__esModule\",{value:!0}),t);var h=w((P,l)=>{l.exports=_jsx_runtime});var S={};b(S,{default:()=>d});var n=y(h());function c(t){let e={a:\"a\",blockquote:\"blockquote\",code:\"code\",em:\"em\",h2:\"h2\",h3:\"h3\",hr:\"hr\",li:\"li\",ol:\"ol\",p:\"p\",pre:\"pre\",strong:\"strong\",ul:\"ul\",...t.components},{Tweet:r}=e;return r||k(\"Tweet\",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:\"There's been massive innovation in the database and backend space for developers building applications with serverless and edge compute. There are new tools, companies, and even programming models that simplify how developers store data.\"}),`\n`,(0,n.jsx)(e.p,{children:\"This post will be an overview of databases that pair well with modern application and compute providers.\"}),`\n`,(0,n.jsx)(r,{id:\"1788538827314717025\"}),`\n`,(0,n.jsx)(e.h2,{children:\"Criteria\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"I'll focus on \",(0,n.jsx)(e.strong,{children:\"transactional\\xB9\"}),\" workloads instead of analytical\\xB2 workloads.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"The \\u201Cbackend\\u201D space is vast: search, analytics, data science, and more \\u2013 so I'll niche down here. The primary criteria of this overview is:\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Services that work exceptionally well when paired with serverless and edge compute\"}),`\n`,(0,n.jsx)(e.li,{children:\"Services that work with JavaScript and TypeScript codebases\"}),`\n`]}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Disclaimer:\"}),\" I work at Vercel, which partners with companies in this post. I also have personally used many of these tools for my own personal projects. My site currently uses PlanetScale and I'm also an angel investor in Supabase (mentioned below).\"]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"DOES ANYONE WANNA EAT MY ASS\"}),`\n`,(0,n.jsx)(e.h2,{children:\"A new programming model\"}),`\n`,(0,n.jsx)(e.p,{children:\"Relational databases have been around for 25+ years.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"While there are new companies creating \",(0,n.jsx)(e.em,{children:\"serverless-first\"}),\" storage solutions, a new programming model is required for workloads to be compatible with serverless compute and modern runtimes.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"These solutions must be:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Connectionless:\"}),\" Developers don't want to think about manual connection management. Traditional database protocols are stateful, whereas HTTP is mostly stateless, making it easier to use with scale to zero compute. Exposed through an SDK or HTTP API, \\u201Cconnectionless\\u201D solutions provide an \",(0,n.jsx)(e.strong,{children:\"abstraction over connection pooling\"}),\".\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Web native:\"}),\" Browser data-fetching APIs (e.g. Web \",(0,n.jsx)(e.code,{children:\"fetch\"}),\") and protocols are eating the world. New databases use HTTP APIs or WebSockets, rather than opening direct connections to the database. This makes them compatible with all forms of compute (including the lighter runtime used in edge compute).\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Lightweight:\"}),\" Client libraries (and drivers) are becoming thin. Complexity is shifting to the database vendor, taking on the burden as part of their global infrastructure. For example, their gateway might handle connection pooling or provide caching infrastructure. This has led to a new wave of ORMs (i.e. abstractions to query data) both as standalone libraries and as integrated database SDKs.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"(Bonus) Type-safe:\"}),\" TypeScript developers are favoring databases or libraries which provide tooling to enable type-safe access to your data. For example: \",(0,n.jsx)(e.a,{href:\"https://www.prisma.io/\",children:\"Prisma\"}),\", \",(0,n.jsx)(e.a,{href:\"https://github.com/koskimas/kysely\",children:\"Kysely\"}),\", \",(0,n.jsx)(e.a,{href:\"https://github.com/drizzle-team/drizzle-orm\",children:\"Drizzle\"}),\", \",(0,n.jsx)(e.a,{href:\"https://www.contentlayer.dev/\",children:\"Contentlayer\"}),\", and \",(0,n.jsx)(e.a,{href:\"https://jawj.github.io/zapatos/\",children:\"Zapatos\"}),\".\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Consider databases like Postgres. New solutions like Neon and Supabase abstract connection management, providing you with a simple way to query and mutate data. In the case of Supabase, there's a client library that uses an HTTP API \",(0,n.jsx)(e.a,{href:\"https://supabase.com/docs/guides/api\",children:\"built on PostgREST\"}),\":\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`import { createClient } from '@supabase/supabase-js'\nlet supabase = createClient('https://<project>.supabase.co', '<your-anon-key>')\nlet { data } = await supabase.from('countries').select()\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"And for Neon:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`import { Client } from '@neondatabase/serverless'\nlet client = new Client(env.DATABASE_URL)\nlet {\n  rows: [{ now }],\n} = await client.query('select now();')\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Neon's solution is \",(0,n.jsx)(e.a,{href:\"https://neon.tech/notes/serverless-driver-for-postgres/\",children:\"particularly interesting\"}),\".\"]}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsx)(e.p,{children:\"The basic premise is simple: our driver redirects the PostgreSQL wire protocol via a special proxy. Our driver connects from the edge function to the proxy over a WebSocket, telling the proxy which database host and port it wants to reach. The proxy opens a TCP connection to that host and port and relays traffic in both directions.\"}),`\n`]}),`\n`,`\n`,(0,n.jsxs)(e.p,{children:[\"Using WebSockets, instead of HTTP, does have tradeoffs. There might be additional latency on the first request setup, but subsequent requests are faster. There's an \",(0,n.jsx)(e.a,{href:\"https://www.rfc-editor.org/rfc/rfc9220.pdf\",children:\"RFC\"}),\" for WebSockets with \",(0,n.jsx)(e.code,{children:\"HTTP/3\"}),\" which would remove that extra network roundtrip.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"The connection management isn't going away \\u2013 it's just being handled by the vendor now.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"There's even solutions like PlanetScale which can handle up to \",(0,n.jsx)(e.a,{href:\"https://planetscale.com/notes/one-million-connections\",children:\"a million connections\"}),\", which also allows you to effectively never think about managing connections.\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"Trends\"}),`\n`,(0,n.jsx)(e.p,{children:\"This new programming model has created emerging trends for database companies:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Databases are increasingly becoming \",(0,n.jsx)(e.strong,{children:\"data platforms\"}),\", including other adjacent solutions like full-text search and analytics.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"The \",(0,n.jsx)(e.strong,{children:\"decoupling of storage and compute\"}),\", popularized by Snowflake (and more), is enabling new players (e.g. Neon et al.) to massively reduce the cost of a \\u201Cdatabase at rest\\u201D. This pairs well with frontend git branch-based workflows, where you want to scale to zero when not being used.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Increasingly developers \",(0,n.jsx)(e.strong,{children:\"don't want to \\u201Cdial the knobs\\u201D\"}),\". Solutions like DynamoDB (and in some ways S3) provided infinite scale without needing to tweak memory, storage, CPU, clusters, and instances.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"The dream of \",(0,n.jsx)(e.strong,{children:\"global data\"}),\" is here, but not how it was predicted. Trying to replicate \",(0,n.jsx)(e.em,{children:\"all\"}),\" data to \",(0,n.jsx)(e.em,{children:\"every\"}),\" network edge is probably not the correct solution most times. Instead, we're seeing specialized data APIs and the emergence of user-specific data stores (e.g. for shopping cart data).\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"More databases are \",(0,n.jsx)(e.strong,{children:\"embracing serverless\"}),\", but what \\u201Cserverless\\u201D means to them varies. There are different vectors of autoscaling: connections, storage, compute, and more.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Databases\"}),`\n`,(0,n.jsx)(e.p,{children:\"I'll bucket these into \\u201Cestablished\\u201D and \\u201Crising\\u201D categories, serverless/serverful, as well as generally available (GA) and pre-GA. I'll also mostly talk about managed vendors.\"}),`\n`,(0,n.jsx)(e.p,{children:\"For example, you can of course run MySQL or Postgres on major cloud providers like AWS. There's a long tail of niche data storage solutions, so some will definitely be missing that I haven't heard of or used.\"}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"2024 Update:\"}),\" A few others providers to add to the list: \",(0,n.jsx)(e.a,{href:\"https://tembo.io\",children:\"Tembo\"}),\", \",(0,n.jsx)(e.a,{href:\"https://www.thenile.dev\",children:\"Nile\"}),\", and \",(0,n.jsx)(e.a,{href:\"https://www.yugabyte.com\",children:\"Yugabyte\"}),\".\"]}),`\n`,(0,n.jsx)(e.h3,{children:\"Established serverless solutions\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"DynamoDB\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:(0,n.jsx)(e.a,{href:\"https://aws.amazon.com/dynamodb/\",children:\"AWS DynamoDB:\"})}),\" Fully managed, serverless, key-value NoSQL database.\"]}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Firebase\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:(0,n.jsx)(e.a,{href:\"https://firebase.google.com/docs/firestore\",children:\"Firestore:\"})}),\" Over 10 years old now, Firestore is a well-adopted document database. One unique advantage Firebase is its built-in support for authentication, real-time workloads, and cross-platform support for mobile.\"]}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"MongoDB\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.a,{href:\"https://www.mongodb.com/use-cases/serverless\",children:\"Atlas Serverless:\"}),\" MongoDB has an entire data platform, including search / analytics / etc. Their recent investment into serverless is very exciting, with Atlas Serverless now \",(0,n.jsx)(e.a,{href:\"https://www.mongodb.com/notes/post/embrace-benefits-serverless-development-atlas\",children:\"generally available\"}),\". Their \",(0,n.jsx)(e.a,{href:\"https://www.mongodb.com/docs/atlas/api/data-api/\",children:\"Data API\"}),\" makes them a fantastic pair for serverless / edge.\"]}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"MySQL\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsxs)(e.strong,{children:[(0,n.jsx)(e.a,{href:\"https://planetscale.com/\",children:\"PlanetScale\"}),\":\"]}),\" MySQL through \",(0,n.jsx)(e.a,{href:\"https://planetscale.com/notes/all-the-tech-planetscale-replaces\",children:\"Vitess\"}),\". Can easily handle quite a \",(0,n.jsx)(e.a,{href:\"https://planetscale.com/notes/one-million-queries-per-second-with-mysql\",children:\"large\"}),\" \",(0,n.jsx)(e.a,{href:\"https://planetscale.com/notes/one-million-connections\",children:\"scale\"}),\" and also includes some nice features to \",(0,n.jsx)(e.a,{href:\"https://planetscale.com/notes/introducing-planetscale-boost\",children:\"speed up\"}),\" and \",(0,n.jsx)(e.a,{href:\"https://planetscale.com/notes/introducing-planetscale-insights-advanced-query-monitoring\",children:\"monitor\"}),\" queries. Their \",(0,n.jsx)(e.a,{href:\"https://planetscale.com/notes/introducing-the-planetscale-serverless-driver-for-javascript\",children:\"serverless driver\"}),\" (\",(0,n.jsx)(e.code,{children:\"@planetscale/database\"}),\") has been easy to use, but I prefer \",(0,n.jsx)(e.a,{href:\"https://github.com/depot/kysely-planetscale\",children:\"Kysely\"}),\".\"]}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"PostgreSQL\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsxs)(e.strong,{children:[(0,n.jsx)(e.a,{href:\"https://aws.amazon.com/rds/aurora/serverless/\",children:\"AWS Aurora\"}),\":\"]}),\" One of the first serverless Postgres offerings.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsxs)(e.strong,{children:[(0,n.jsx)(e.a,{href:\"https://www.cockroachlabs.com/notes/announcing-cockroachdb-serverless/\",children:\"CockroachDB\"}),\":\"]}),\" Autoscales and distributes data across multiple nodes. Focused on high data consistency and integrity. Supports most of Postgres but not stored procedures and extensions.\"]}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Redis\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsxs)(e.strong,{children:[(0,n.jsx)(e.a,{href:\"https://upstash.com/\",children:\"Upstash\"}),\":\"]}),\" Offers durable/consistent Redis, global replication options, and Kafka. Fantastic \",(0,n.jsx)(e.code,{children:\"@upstash/redis\"}),\" HTTP/REST client library.\"]}),`\n`]}),`\n`]}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{children:\"Rising serverless database solutions\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Generally Available (GA)\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsxs)(e.strong,{children:[(0,n.jsx)(e.a,{href:\"https://fauna.com/\",children:\"Fauna\"}),\":\"]}),\" They were an early mover in the serverless data space. I've had success with their GraphQL APIs before, but feel mostly indifferent on \",(0,n.jsx)(e.a,{href:\"https://docs.fauna.com/fauna/current/api/fql/\",children:\"FQL\"}),\".\"]}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Pre-GA\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:(0,n.jsx)(e.a,{href:\"https://www.convex.dev/\",children:\"Convex\"})}),\": Fantastic for real-time workloads, but also a very simple, type-safe interface for querying/mutating data. You write (and think) in functions. Pairs well with React's mental model.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:(0,n.jsx)(e.a,{href:\"https://grafbase.com/\",children:\"Grafbase\"})}),\": If you love GraphQL, Grafbase is worth exploring. Designed to integrate into branch-based workflows + fast reads globally. Realtime and full-text search are in the works.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:(0,n.jsx)(e.a,{href:\"https://neon.tech/\",children:\"Neon:\"})}),\" Postgres with separation of storage and compute. Uniquely designed for serverless and works with the native Postgres driver + supports database branching workflows.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsxs)(e.strong,{children:[(0,n.jsx)(e.a,{href:\"https://supabase.com/\",children:\"Supabase\"}),\":\"]}),\" Open-source, built-on pure Postgres. \",(0,n.jsx)(e.a,{href:\"https://supabase.com/database\",children:\"Database\"}),\" + \",(0,n.jsx)(e.a,{href:\"https://supabase.com/auth\",children:\"Auth\"}),\" + \",(0,n.jsx)(e.a,{href:\"https://supabase.com/storage\",children:\"Storage\"}),\" and more. Scales up on pay-as-you-go, and \",(0,n.jsx)(e.a,{href:\"https://supabase.com/notes/supabase-series-b#where-were-going\",children:\"working on scale to zero\"}),\".\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:(0,n.jsx)(e.a,{href:\"https://xata.io/\",children:\"Xata\"})}),\": Not only a database, but search / analytics as well. I'm a fan of their spreadsheet-like UI, which is approachable for a wider audience.\"]}),`\n`]}),`\n`]}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.em,{children:\"+ Long tail of new providers that can do DB hosting (Railway, Render, Fly, etc).\"})}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{children:\"Stateful backends and other solutions\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Generally Available (GA)\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsxs)(e.strong,{children:[(0,n.jsx)(e.a,{href:\"https://cloud.google.com/alloydb\",children:\"AlloyDB\"}),\":\"]}),\" Very exciting innovation coming from Google. AlloyDB is unique because it can handle both transactional\\xB9 and analytical\\xB2 workloads.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsxs)(e.strong,{children:[(0,n.jsx)(e.a,{href:\"https://ably.com/\",children:\"Ably\"}),\":\"]}),\" Realtime infrastructure with \",(0,n.jsx)(e.a,{href:\"https://ably.com/docs/general/queues\",children:\"queues support\"}),\" and other message durability options.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsxs)(e.strong,{children:[(0,n.jsx)(e.a,{href:\"https://www.crunchydata.com/\",children:\"Crunchy Postgres\"}),\":\"]}),\" Crunchy Postgres is \",(0,n.jsx)(e.a,{href:\"https://changelog.com/news/just-postgres-LWm4\",children:'\"just Postgres\"'}),\". Focused on performance and availability, cost-effectiveness, and supporting all native Postgres features.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:(0,n.jsx)(e.a,{href:\"https://hasura.io/\",children:\"Hasura:\"})}),\" Makes it easy to connect data from many different sources and expose it as a GraphQL API. Can use Neon under-the-hood as the database provider.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsxs)(e.strong,{children:[(0,n.jsx)(e.a,{href:\"https://liveblocks.io/\",children:\"Liveblocks\"}),\":\"]}),\" Realtime collaboration infrastructure, they offer persistent \",(0,n.jsx)(e.a,{href:\"https://liveblocks.io/conflict-free-data-types\",children:\"conflict-free data\"}),\" along with APIs for document browsing, permissions management, database sync. Beautiful design and documentation.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:(0,n.jsx)(e.a,{href:\"https://replicache.dev/\",children:\"Replicache\"})}),\": More of a database \",(0,n.jsx)(e.em,{children:\"synchronization engine\"}),\" that can be coupled with other solutions with no real-time solution. We use this for \",(0,n.jsx)(e.a,{href:\"https://vercel.com/notes/making-live-reviews-a-reality-enhanced-preview-experience\",children:\"comments on Vercel previews\"}),\".\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsxs)(e.strong,{children:[(0,n.jsx)(e.a,{href:\"https://www.timescale.com/\",children:\"TimeScale\"}),\":\"]}),\" For both transactional and analytical workloads. Adds many features found in NoSQL databases to Postgres, and also integrates with S3 for storage.\"]}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Pre-GA\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsxs)(e.strong,{children:[(0,n.jsx)(e.a,{href:\"https://www.chiselstrike.com/\",children:\"ChiselStrike\"}),\":\"]}),\" Write your TypeScript class, generate an API. Really leaning into the \\u201Cinfrastructure from code\\u201D approach, you write and think in functions, somewhat similar to Convex.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsxs)(e.strong,{children:[(0,n.jsx)(e.a,{href:\"https://www.edgedb.com/\",children:\"EdgeDB\"}),\":\"]}),\" EdgeDB is challenging the status quo. Particularly the \\u201Cmerger\\u201D between ORM / database, more than just a query builder, but a way to \",(0,n.jsx)(e.em,{children:\"optimize\"}),\" queries.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:(0,n.jsx)(e.a,{href:\"https://nhost.io/\",children:\"Nhost:\"})}),\" Firebase, but with GraphQL. Built on Hasura, Postgres, and S3.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.a,{href:\"https://www.rowy.io\",children:\"Rowy:\"}),\" Low-code, spreadsheet-like backend (almost like an open-source Airtable) but they also have the ability to write functions to mutate data.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.a,{href:\"https://surrealdb.com/\",children:\"SurrealDB:\"}),\" Has its own SQL-flavored syntax, also trying to provide the spreadsheet-like UI for viewing data (still waitlist access, haven't used it).\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:(0,n.jsx)(e.a,{href:\"https://www.tigrisdata.com/\",children:\"Tigris:\"})}),\" Document database, focused on real-time and also includes full-text search.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:(0,n.jsx)(e.a,{href:\"https://wundergraph.com/\",children:\"WunderGraph:\"})}),\" Trying to lead with an excellent ORM / client library (end-to-end type safety, GraphQL support) and wedge into a cloud product (still waitlist access, haven't used it).\"]}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Other Solutions\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Caching Engines:\"}),\" \",(0,n.jsx)(e.a,{href:\"https://stellate.co/\",children:\"Stellate\"}),\", \",(0,n.jsx)(e.a,{href:\"https://www.prisma.io/data-platform/accelerate\",children:\"Prisma Accelerate\"}),\", \",(0,n.jsx)(e.a,{href:\"https://readyset.io/\",children:\"ReadySet\"}),\".\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Cloud Provider Offerings:\"}),\" Azure SQL, Azure CosmosDB, Google Cloud SQL, Google BigTable, and many more.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Content Management (Headless CMS):\"}),\" These can still act as a database, just a different domain-specific solution. \",(0,n.jsx)(e.a,{href:\"https://www.sanity.io/\",children:\"Sanity\"}),\", \",(0,n.jsx)(e.a,{href:\"https://www.contentful.com/\",children:\"Contentful\"}),\", \",(0,n.jsx)(e.a,{href:\"https://www.sitecore.com/\",children:\"Sitecore\"}),\", and more.\"]}),`\n`]}),`\n`]}),`\n`]}),`\n`,(0,n.jsx)(e.hr,{}),`\n`,(0,n.jsxs)(e.p,{children:[\"\\xB9 Commonly referred to as OLTP (Online \",(0,n.jsx)(e.em,{children:\"Transactional\"}),\" Processing). These are for CRUD operations, most commonly the MySQL and Postgres databases of the world.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"\\xB2 Commonly referred to as OLAP (Online \",(0,n.jsx)(e.em,{children:\"Analytical\"}),\" Processing). These are for your real-time data workloads, like \",(0,n.jsx)(e.a,{href:\"https://clickhouse.com/\",children:\"Clickhouse\"}),\" (also \",(0,n.jsx)(e.a,{href:\"https://www.tinybird.co/\",children:\"Tinybird\"}),\"), \",(0,n.jsx)(e.a,{href:\"https://www.singlestore.com/\",children:\"SingleStore\"}),\", \",(0,n.jsx)(e.a,{href:\"https://www.timescale.com/\",children:\"TimeScale\"}),\", and \",(0,n.jsx)(e.a,{href:\"https://www.elastic.co/\",children:\"ElasticSearch\"}),\".\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsxs)(e.em,{children:[\"Thanks to \",(0,n.jsx)(e.a,{href:\"https://twitter.com/rauchg\",children:\"Guillermo Rauch\"}),\", \",(0,n.jsx)(e.a,{href:\"https://twitter.com/kiwicopple\",children:\"Paul Copplestone\"}),\", \",(0,n.jsx)(e.a,{href:\"https://twitter.com/fbjork\",children:\"Fredrik Bj\\xF6rk\"}),\", \",(0,n.jsx)(e.a,{href:\"https://twitter.com/anthonysheww\",children:\"Anthony Shew\"}),\", \",(0,n.jsx)(e.a,{href:\"https://twitter.com/craigkerstiens\",children:\"Craig Kerstiens\"}),\", \",(0,n.jsx)(e.a,{href:\"https://twitter.com/jamwt\",children:\"Jamie Turner\"}),\", \",(0,n.jsx)(e.a,{href:\"https://twitter.com/nikitabase\",children:\"Nikita Shamgunov\"}),\", \",(0,n.jsx)(e.a,{href:\"https://twitter.com/stuffyokodraws\",children:\"Yoko Li\"}),\", \",(0,n.jsx)(e.a,{href:\"https://twitter.com/177pc\",children:\"Pratyush Choudhury\"}),\", \",(0,n.jsx)(e.a,{href:\"https://twitter.com/kelvich\",children:\"Stas Kelvich\"}),\", \",(0,n.jsx)(e.a,{href:\"https://twitter.com/enesakar\",children:\"Enes Akar\"}),\", and \",(0,n.jsx)(e.a,{href:\"https://twitter.com/steventey\",children:\"Steven Tey\"}),\" for reviewing this post.\"]})})]})}function d(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,{...t,children:(0,n.jsx)(c,{...t})}):c(t)}function k(t,e){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+t+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return v(S);})();\n;return Component;",
    "title": "The State of The Edge",
    "summary": "An overview of databases that pair well with modern application and compute providers.",
    "date": "2024-04-17T23:00:40.373Z",
    "image": "/images/backend/og.avif",
    "tags": ["markdown", "react", "vite"],
    "_meta": {
      "filePath": "backend/index.mdx",
      "fileName": "index.mdx",
      "directory": "backend",
      "extension": "mdx",
      "path": "backend"
    },
    "slug": "backend",
    "wordCount": 1714,
    "readTime": "10 min read",
    "lastModified": "2024-05-25T05:27:11.000Z"
  },
  {
    "content": "var Component=(()=>{var p=Object.create;var o=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var w=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),y=(t,e)=>{for(var i in e)o(t,i,{get:e[i],enumerable:!0})},h=(t,e,i,a)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of u(e))!f.call(t,r)&&r!==i&&o(t,r,{get:()=>e[r],enumerable:!(a=m(e,r))||a.enumerable});return t};var b=(t,e,i)=>(i=t!=null?p(g(t)):{},h(e||!t||!t.__esModule?o(i,\"default\",{value:t,enumerable:!0}):i,t)),x=t=>h(o({},\"__esModule\",{value:!0}),t);var l=w((D,c)=>{c.exports=_jsx_runtime});var v={};y(v,{default:()=>d});var n=b(l());function s(t){let e={a:\"a\",code:\"code\",h3:\"h3\",h4:\"h4\",img:\"img\",li:\"li\",p:\"p\",pre:\"pre\",ul:\"ul\",...t.components},{Callout:i}=e;return i||k(\"Callout\",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[`Getting images right and fast on the web is hard.\nIf we are doing it wrong,\nwe create a poor user experience with slow loading times and\nCLS (`,(0,n.jsx)(e.a,{href:\"https://blog.hubspot.com/marketing/cumulative-layout-shift#:~:text=What%20is%20Cumulative%20Layout%20Shift,constitute%20a%20large%20CLS%20score.\",children:\"Cumulative Layout Shift\"}),\").\"]}),`\n`,(0,n.jsx)(e.h3,{children:\"next/image\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The result of \",(0,n.jsx)(e.code,{children:\"[1, 2, 3].join('-'){:js}\"}),\" is \",(0,n.jsx)(e.code,{children:\"'1-2-3'{:js}\"}),\".\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"In \",(0,n.jsx)(e.a,{href:\"https://nextjs.org/\",children:\"Next.js\"}),\" we can use the \",(0,n.jsx)(e.a,{href:\"https://nextjs.org/docs/api-reference/next/image\",children:\"next/image\"}),` component to avoid this bad user experience.\n`,(0,n.jsx)(e.code,{children:\"next/image\"}),\" automatically optimizes our images in three ways to reduce the slow loading times:\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Converts the image to the smallest supported format\"}),`\n`,(0,n.jsx)(e.li,{children:\"Resizes the image based on the used device viewport\"}),`\n`,(0,n.jsx)(e.li,{children:\"Uses image compression\"}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[`It also creates a placeholder to avoid the CLS.\nThe following example shows the usage of `,(0,n.jsx)(e.code,{children:\"next/image\"}),\" with a static image:\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-tsx\",children:`import picture from './pictures/mountain.jpg'\n;<Image src={picture} alt=\"Picture of a mountain\" placeholder=\"blur\" />\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"Markdown\"}),`\n`,(0,n.jsx)(e.p,{children:\"This looks great, but how can we use it in our markdown files?\"}),`\n`,(0,n.jsx)(e.h3,{children:\"MDX\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"My first reaction was to use \",(0,n.jsx)(e.a,{href:\"https://mdxjs.com/\",children:\"MDX\"}),\" and use \",(0,n.jsx)(e.code,{children:\"next/image\"}),` just as in the example.\nBut that means that we can't use normal markdown images and\nit turns out that this won't work with `,(0,n.jsx)(e.a,{href:\"https://www.contentlayer.dev/\",children:\"contentlayer\"}),`.\nIt won't work, because `,(0,n.jsx)(e.a,{href:\"https://nextjs.org/\",children:\"Next.js\"}),` does some magic on the import of the static image.\nThe object which gets returned by the import\ncontains not only a path to the image,\nit contains also the width and height\nplus a very small version of the image for the blurred placeholder.\nThis magic does not work if the `,(0,n.jsx)(e.a,{href:\"https://mdxjs.com/\",children:\"MDX\"}),\" file is loaded with \",(0,n.jsx)(e.a,{href:\"https://www.contentlayer.dev/\",children:\"contentlayer\"}),`,\nbecause `,(0,n.jsx)(e.a,{href:\"https://www.contentlayer.dev/\",children:\"contentlayer\"}),` uses its own bundler,\nwhich knows nothing about the import magic for images.`]}),`\n`,(0,n.jsx)(e.h3,{children:\"The trick with the public folder\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The next idea was to use normal markdown images and to place the images in the \",(0,n.jsx)(e.code,{children:\"public\"}),` folder.\nThis eliminates the need for static imports and treats our image like a remote image.\nBut in order to make this work, we have to tell `,(0,n.jsx)(e.code,{children:\"next/image\"}),` the dimensions of the image.\nIf we would use a static import for the image,\nthe import magic would provide the dimensions for us.\nTo pass the width and height to the image component we use a `,(0,n.jsx)(e.a,{href:\"https://github.com/rehypejs/rehype\",children:\"rehype\"}),\" plugin called \",(0,n.jsx)(e.a,{href:\"https://github.com/ksoichiro/rehype-img-size\",children:\"rehype-img-size\"}),\".\"]}),`\n`,(0,n.jsx)(e.img,{src:\"/contentlayer-next-image/process.jpg\",alt:\"pussy\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-bash\",children:`pnpm add -D rehype-img-size\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"After installation we can configure \",(0,n.jsx)(e.a,{href:\"https://www.contentlayer.dev/\",children:\"contentlayer\"}),\" to use the plugin within \",(0,n.jsx)(e.a,{href:\"https://mdxjs.com/\",children:\"MDX\"}),`,\nbut it should work with `,(0,n.jsx)(e.a,{href:\"https://www.contentlayer.dev/docs/reference/source-files/make-source#markdown\",children:\"markdown\"}),\" too.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-javascript\",children:`export default makeSource({\n  contentDirPath: 'content/posts',\n  documentTypes: [Post],\n  mdx: {\n    rehypePlugins: [[rehypeImgSize, { dir: 'public' }]],\n    remarkPlugins: [],\n  },\n})\n`})}),`\n`,(0,n.jsx)(e.p,{children:`The plugin will now find each image in the markdown content and pass its dimensions to the image component.\nIf we have the following markdown content...`}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-markdown\",children:`![Picture of a mountain](/pictures/mountain.jpg)\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"... \",(0,n.jsx)(e.a,{href:\"https://github.com/ksoichiro/rehype-img-size\",children:\"rehype-img-size\"}),` will look up\n`,(0,n.jsx)(e.code,{children:\"pictures/mountain.jpg\"}),\" in the \",(0,n.jsx)(e.code,{children:\"public\"}),` directory (as configured in the contentlayer config) and\ncalculate its size.\nNow we can replace the image component with `,(0,n.jsx)(e.code,{children:\"next/image\"}),\":\"]}),`\n`,(0,n.jsx)(\"a\",{id:\"replace-img-with-next-image\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-tsx\",children:`import { useMDXComponent } from 'next-contentlayer/hooks'\nimport Image from 'next/image'\n\ntype Props = {\n  code: string\n}\n\nconst Markdown = ({ code }: Props) => {\n  const MDXComponent = useMDXComponent(code)\n  return (\n    <MDXComponent\n      components={{\n        img: Image,\n      }}\n    />\n  )\n}\n\nexport default Markdown\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"And that's it, we are now using \",(0,n.jsx)(e.code,{children:\"next/image\"}),` to render our markdown images.\nThis approach works, but it is not ideal, because the images can't be located next to the content.\nThey have to be placed in the `,(0,n.jsx)(e.code,{children:\"public\"}),\" directory.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"It would be better if we could locate the images right next to the content:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`\\u{1F4C1} content/posts/2022-12-11-sample\n\\u2502\n\\u2514\\u2500\\u2500 \\u{1F4C1} assets\n    \\u2502\n    \\u2514\\u2500\\u2500 \\u{1F4C4} mountaindick.jpg\n    \\u2502\n    \\u2514\\u2500\\u2500 \\u{1F4C4} index.mdx\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[`We also don't have the small image for the blurred placeholder,\nwe can only use the `,(0,n.jsx)(e.code,{children:\"empty\"}),\" placeholder.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"If these two things are not so important to you, this is the right approach.\"}),`\n`,(0,n.jsx)(e.h3,{children:\"Custom rehype plugin\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"To fix the two weaknesses from the last approach, we can write a custom \",(0,n.jsx)(e.a,{href:\"https://github.com/rehypejs/rehype\",children:\"rehype\"}),` plugin.\nOur plugin should do the following things:`]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Copy the image from its location to the public folder\"}),`\n`,(0,n.jsxs)(e.li,{children:[\"Update the \",(0,n.jsx)(e.code,{children:\"src\"}),\" attribute to the new location\"]}),`\n`,(0,n.jsx)(e.li,{children:\"Calculate the width and height\"}),`\n`,(0,n.jsx)(e.li,{children:\"Create small image for blurred placeholder\"}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[`Before we write this plugin,\nwe should understand how the markdown processing works in `,(0,n.jsx)(e.a,{href:\"https://www.contentlayer.dev/\",children:\"contentlayer\"}),\".\"]}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.a,{href:\"https://www.contentlayer.dev/\",children:\"contentlayer\"}),\" uses \",(0,n.jsx)(e.a,{href:\"https://github.com/remarkjs/remark\",children:\"remark\"}),\" to parse the markdown into a \",(0,n.jsx)(e.a,{href:\"https://github.com/syntax-tree/mdast\",children:\"mdast\"}),`.\nWe can now use `,(0,n.jsx)(e.code,{children:\"remark plugins\"}),\" to modify the \",(0,n.jsx)(e.code,{children:\"mdast\"}),`.\nThen `,(0,n.jsx)(e.code,{children:\"rehype\"}),\" comes into play and converts the \",(0,n.jsx)(e.code,{children:\"mdast\"}),\" into a \",(0,n.jsx)(e.a,{href:\"https://github.com/syntax-tree/hast\",children:\"hast\"}),`.\n`,(0,n.jsx)(e.code,{children:\"rehype plugins\"}),\" can now modify the \",(0,n.jsx)(e.code,{children:\"hast\"}),`.\nFinally the `,(0,n.jsx)(e.code,{children:\"hast\"}),\" is converted into \",(0,n.jsx)(e.a,{href:\"https://reactjs.org/\",children:\"react\"}),\" components.\"]}),`\n`,(0,n.jsx)(e.img,{src:\"/contentlayer-next-image/markdown.avif\",alt:\"markdown processing\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"For our plugin we have to modify the \",(0,n.jsx)(e.code,{children:\"hast\"}),`,\nbecause images in the `,(0,n.jsx)(e.code,{children:\"mdast\"}),` don't have width or height and they don't support custom properties.\nThe `,(0,n.jsx)(e.code,{children:\"hast\"}),\" on the other hand supports all properties of the HTML \",(0,n.jsx)(e.code,{children:\"img\"}),` component and\nwe can pass custom properties.`]}),`\n`,(0,n.jsx)(e.h4,{children:\"Implementation\"}),`\n`,(0,n.jsx)(e.p,{children:\"We start our plugin by defining the options:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"publicDir: path to the public directory\"}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:`Then we can define our plugin.\nThe plugin is a function which gets the options and returns another function which receives the following parameters:`}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"tree: the whole \",(0,n.jsx)(e.code,{children:\"hast\"})]}),`\n`,(0,n.jsx)(e.li,{children:\"file: the parsed file with path and content\"}),`\n`,(0,n.jsx)(e.li,{children:\"done: a function which should be called when our plugin has finished\"}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Our plugin searches the \",(0,n.jsx)(e.code,{children:\"hast\"}),\" tree and for each element with the \",(0,n.jsx)(e.code,{children:\"tagName\"}),\" \",(0,n.jsx)(e.code,{children:\"img\"}),`\nwe call the `,(0,n.jsx)(e.code,{children:\"processImage\"}),` function.\n`,(0,n.jsx)(e.code,{children:\"rehype\"}),` plugins can't be async, but image processing is async.\nThat's the reason why we store each resulting `,(0,n.jsx)(e.code,{children:\"Promise\"}),\" of the \",(0,n.jsx)(e.code,{children:\"processImage\"}),` function in an array and\ncall the `,(0,n.jsx)(e.code,{children:\"done\"}),\" function if all \",(0,n.jsx)(e.code,{children:\"Promises\"}),\" are resolved and the work is done.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-ts\",children:`type Options = {\n  publicDir: string\n}\n\nconst staticImages: Plugin<[Options], Root> =\n  (options) => (tree, file, done) => {\n    const tasks: Promise<void>[] = []\n\n    visit(tree, 'element', (node) => {\n      if (node.tagName === 'img') {\n        tasks.push(processImage(options, file, node))\n      }\n    })\n\n    Promise.all(tasks).then(() => done())\n  }\n\nconst processImage = async (\n  options: Options,\n  file: VFileWithOutput<unknown>,\n  Element\n): Promise<void> => {\n  // implementation comes next\n}\n\nexport default staticImages\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Ok, now we can have a detailed look at the implementation of the \",(0,n.jsx)(e.code,{children:\"processImage\"}),` function.\nAt first we have to find the real path of the image.\nFortunately, contentlayer stores information about the location of our markdown file in the `,(0,n.jsx)(e.code,{children:\"data\"}),\" field of the \",(0,n.jsx)(e.code,{children:\"file\"}),\".\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-ts\",children:`// find the content directory\nconst root = file.dirname || process.cwd()\n\n// find the directory of the markdown file\n// RawDocumentData is an import from contentlayer/source-files\nconst data = file.data as { rawDocumentData: RawDocumentData }\nconst directory = data.rawDocumentData.sourceFileDir\n\n// get the path of the image from the src attributes\nconst filePath = (image.properties?.src as string) || ''\n\n// create the path by joining root, directory and filePath\n// path is imported from path\nconst imagePath = path.join(root, directory, filePath)\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Now that we have the path we can use \",(0,n.jsx)(e.a,{href:\"https://sharp.pixelplumbing.com/\",children:\"sharp\"}),\" to read the width and height of the image.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-ts\",children:`// sharp is an import from sharp (@types/sharp)\nconst image = await sharp(imagePath)\n\n// get the width and height of the image\nconst { width, height } = await image.metadata()\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[`After that we can create a small version of the image for the blurred placeholder.\nWe will create a `,(0,n.jsx)(e.code,{children:\"png\"}),\" with a \",(0,n.jsx)(e.code,{children:\"quality\"}),\" of \",(0,n.jsx)(e.code,{children:\"75\"}),\", a width of \",(0,n.jsx)(e.code,{children:\"8px\"}),\" and we keep the aspect ratio.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-ts\",children:`const imgAspectRatio = width / height\nconst blurDataURL = await image\n  .resize(8, Math.round(8 / imgAspectRatio))\n  .png({\n    quality: 75,\n  })\n  .toBuffer()\n  .then((buffer) => \\`data:image/png;base64,\\${buffer.toString('base64')}\\`)\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Then we can copy the image to the \",(0,n.jsx)(e.code,{children:\"public\"}),\" folder and create a new path for the \",(0,n.jsx)(e.code,{children:\"src\"}),\" attribute of the image.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-ts\",children:`const src = path.join(directory, filePath)\nconst target = path.join(options.publicDir, src)\n\nawait fs.mkdir(path.dirname(targetDir), { recursive: true })\nawait fs.copyFile(imagePath, target)\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"With all the information in place we can update the properties of the \",(0,n.jsx)(e.code,{children:\"img\"}),\" tag.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-ts\",children:`node.properties = {\n  ...node.properties,\n  width,\n  height,\n  src: path.join('/', src),\n  blurDataURL,\n}\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"After we have finished writing our plugin, it is time to configure contentlayer.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-javascript\",children:`import mdxImages from './lib/static-images'\n\nexport default makeSource({\n  contentDirPath: 'content/posts',\n  documentTypes: [Post],\n  mdx: {\n    rehypePlugins: [\n      [mdxImages, { publicDir: path.join(process.cwd(), 'public') }],\n    ],\n    remarkPlugins: [],\n  },\n})\n`})}),`\n`,(0,n.jsx)(i,{emoji:\"\\u26A0\\uFE0F\",children:(0,n.jsxs)(e.p,{children:[\"Don't forget to replace the \",(0,n.jsx)(e.code,{children:\"img\"}),\" tag with \",(0,n.jsx)(e.code,{children:\"next/image\"}),`.\nAs we have seen in the `,(0,n.jsx)(\"a\",{href:\"#replace-img-with-next-image\",children:\"rehype-img-size method\"}),\".\"]})}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-rust\",children:`fn fib(n: u64) -> u64 {\n  if n <= 1 {\n    return n;\n  }\n  fib(n - 1) + fib(n - 2)\n}\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"Conclusion\"}),`\n`,(0,n.jsx)(e.p,{children:\"Ok, let's summarize again what we have achieved.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"We have written a \",(0,n.jsx)(e.code,{children:\"rehype\"}),\" plugin, which does the following steps fully automatic for us:\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Copy the image from its location to the public folder\"}),`\n`,(0,n.jsxs)(e.li,{children:[\"Update the \",(0,n.jsx)(e.code,{children:\"src\"}),\" attribute to the new location\"]}),`\n`,(0,n.jsx)(e.li,{children:\"Calculate the width and height\"}),`\n`,(0,n.jsx)(e.li,{children:\"Create a small image for the blurred placeholder\"}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"With this plugin we can use the normal markdown image syntax and gain all the benefits of \",(0,n.jsx)(e.code,{children:\"next/image\"}),\":\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Smallest supported format\"}),`\n`,(0,n.jsx)(e.li,{children:\"Resized version based on the used device viewport\"}),`\n`,(0,n.jsx)(e.li,{children:\"image compression\"}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"For a more complete example have a look at the \",(0,n.jsx)(e.a,{href:\"https://github.com/sdorra/sdorra.dev/blob/main/lib/static-images.ts\",children:\"article's source code\"}),\".\"]})]})}function d(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,{...t,children:(0,n.jsx)(s,{...t})}):s(t)}function k(t,e){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+t+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return x(v);})();\n;return Component;",
    "title": "Contentlayer with Next/Image",
    "summary": "How to use static markdown images with contentlayer and next/image",
    "date": "2022-12-11T00:00:40.373Z",
    "image": "/images/contentlayer-next-image/process.jpg",
    "_meta": {
      "filePath": "contentlayer-next-image/index.mdx",
      "fileName": "index.mdx",
      "directory": "contentlayer-next-image",
      "extension": "mdx",
      "path": "contentlayer-next-image"
    },
    "slug": "contentlayer-next-image",
    "wordCount": 1488,
    "readTime": "8 min read",
    "lastModified": "2024-05-25T05:27:11.000Z"
  },
  {
    "content": "var Component=(()=>{var g=Object.create;var a=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var f=Object.getPrototypeOf,y=Object.prototype.hasOwnProperty;var w=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),b=(t,e)=>{for(var r in e)a(t,r,{get:e[r],enumerable:!0})},l=(t,e,r,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of m(e))!y.call(t,o)&&o!==r&&a(t,o,{get:()=>e[o],enumerable:!(i=u(e,o))||i.enumerable});return t};var v=(t,e,r)=>(r=t!=null?g(f(t)):{},l(e||!t||!t.__esModule?a(r,\"default\",{value:t,enumerable:!0}):r,t)),x=t=>l(a({},\"__esModule\",{value:!0}),t);var c=w((S,s)=>{s.exports=_jsx_runtime});var k={};b(k,{default:()=>p});var n=v(c());function h(t){let e={a:\"a\",code:\"code\",em:\"em\",h2:\"h2\",h3:\"h3\",hr:\"hr\",li:\"li\",ol:\"ol\",p:\"p\",pre:\"pre\",strong:\"strong\",ul:\"ul\",...t.components},{Callout:r,Tweet:i}=e;return r||d(\"Callout\",!0),i||d(\"Tweet\",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:\"I updated my blog this weekend and wanted to share some thoughts along the way:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.a,{href:\"#content-management\",children:\"Content Management\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"#retrieving-content\",children:\"Retrieving Content\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"#remark-and-rehype\",children:\"Remark and Rehype\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"#dependency-minimalism\",children:\"Dependency Minimalism\"})}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.a,{href:\"#performance\",children:\"Performance\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"#server-components\",children:\"Server Components\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"#partial-prerendering\",children:\"Partial Prerendering\"})}),`\n`]}),`\n`]}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"#opinions\",children:\"Opinions\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"#conclusion\",children:\"Conclusion\"})}),`\n`]}),`\n`,(0,n.jsx)(r,{emoji:\"\\u26A0\\uFE0F\",children:(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Disclaimer:\"}),\" My site is my \\u201Cbreakable toy\\u201D. I enjoy and \",(0,n.jsx)(e.em,{children:\"intentionally\"}),\" change technology and try new patterns here. I'd encourage you to do the same and then write about why you made those choices.\"]})}),`\n`,(0,n.jsx)(e.h2,{children:\"Content Management\"}),`\n`,(0,n.jsx)(e.p,{children:\"I've moved my content from HTML to vanilla Markdown, to MDX, to a CMS, and back to MDX over the years. My content requirements as of now are:\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Written in Markdown\\xB9\"}),`\n`,(0,n.jsx)(e.li,{children:\"Support for syntax highlighting, embedded tweets, and other components\"}),`\n`,(0,n.jsx)(e.li,{children:\"Managed through version control\\xB2\"}),`\n`,(0,n.jsx)(e.li,{children:\"Minimal external dependencies\"}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"My goal was to simplify without giving up too many features.\"}),`\n`,(0,n.jsx)(e.h3,{children:\"Retrieving Content\"}),`\n`,(0,n.jsx)(i,{id:\"1793666719552065850\"}),`\n`,(0,n.jsx)(e.p,{children:\"You can go surprisingly far with just Node.js and JavaScript. You'll notice a theme start to emerge in this blog post: fewer dependencies, and more copy/paste-able code.\"}),`\n`,(0,n.jsx)(e.p,{children:\"I removed the following libraries:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.code,{children:\"contentlayer\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.code,{children:\"next-contentlayer\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.code,{children:\"rehype-autolink-headings\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.code,{children:\"rehype-pretty-code\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.code,{children:\"rehype-slug\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.code,{children:\"remark-gfm\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.code,{children:\"shiki\"})}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"I was still able to maintain almost all of my content requirements with not much code. For example, here's how I'm able to retrieve all of my blog posts:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`import path from 'path'\nimport fs from 'fs'\n\nfunction getMDXFiles(dir) {\n  return fs.readdirSync(dir).filter((file) => path.extname(file) === '.mdx')\n}\n\nfunction readMDXFile(filePath) {\n  let rawContent = fs.readFileSync(filePath, 'utf-8')\n  return parseFrontmatter(rawContent)\n}\n\nfunction getMDXData(dir) {\n  let mdxFiles = getMDXFiles(dir)\n  return mdxFiles.map((file) => {\n    let { metadata, content } = readMDXFile(path.join(dir, file))\n    let slug = path.basename(file, path.extname(file))\n    return {\n      metadata,\n      slug,\n      content,\n    }\n  })\n}\n\nexport function getBlogPosts() {\n  return getMDXData(path.join(process.cwd(), 'content'))\n}\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"That's not too bad. So what am I missing? Well, Contentlayer gives you Fast Refresh for your content. That's nice. You can \",(0,n.jsx)(e.a,{href:\"https://github.com/gaearon/overreacted.io/pull/797\",children:\"workaround this\"}),\" or just use \",(0,n.jsx)(e.code,{children:\"@next/mdx\"}),\", which I might do. Contentlayer has other features, too, but they're unnecessary for my blog.\"]}),`\n`,(0,n.jsx)(e.h3,{children:\"Remark and Rehype\"}),`\n`,(0,n.jsx)(e.p,{children:\"What about the AST modifications for auto-linking headings, adding IDs, and supporting syntax highlighting? I don't know why I didn't think of this before, but you can just\\u2026 use React components.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`import { highlight } from 'sugar-high' // 1KB new dependency\n\n// This replaces rehype-pretty-code and shiki\nfunction Code({ children, ...props }) {\n  let codeHTML = highlight(children)\n  return <code dangerouslySetInnerHTML={{ __html: codeHTML }} {...props} />\n}\n\n// This replaces rehype-slug\nfunction slugify(str) {\n  return str\n    .toString()\n    .toLowerCase()\n    .trim() // Remove whitespace from both ends of a string\n    .replace(/\\\\s+/g, '-') // Replace spaces with -\n    .replace(/&/g, '-and-') // Replace & with 'and'\n    .replace(/[^\\\\w\\\\-]+/g, '') // Remove all non-word characters except for -\n    .replace(/\\\\-\\\\-+/g, '-') // Replace multiple - with single -\n}\n\n// This replaces rehype-autolink-headings\nfunction createHeading(level) {\n  return ({ children }) => {\n    let slug = slugify(children)\n    return React.createElement(\n      \\`h\\${level}\\`,\n      { id: slug },\n      [\n        React.createElement('a', {\n          href: \\`#\\${slug}\\`,\n          key: \\`link-\\${slug}\\`,\n          className: 'anchor',\n        }),\n      ],\n      children\n    )\n  }\n}\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Oh and that \",(0,n.jsx)(e.code,{children:\"remark-gfm\"}),\" I was using for the GitHub style Markdown tables? Again, you can use a React component for that.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`function Table({ data }) {\n  let headers = data.headers.map((header, index) => (\n    <th key={index}>{header}</th>\n  ))\n  let rows = data.rows.map((row, index) => (\n    <tr key={index}>\n      {row.map((cell, cellIndex) => (\n        <td key={cellIndex}>{cell}</td>\n      ))}\n    </tr>\n  ))\n\n  return (\n    <table>\n      <thead>\n        <tr>{headers}</tr>\n      </thead>\n      <tbody>{rows}</tbody>\n    </table>\n  )\n}\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"Dependency Minimalism\"}),`\n`,(0,n.jsx)(e.p,{children:\"Why go through all of this work to delete dependencies?\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"After having a blog for 10 years, I've gained a new appreciation for keeping things simple. Now, I'm not going \",(0,n.jsx)(e.em,{children:\"full\"}),\" minimalist here. I still want nice things. But I'm taking more opportunities to simplify and keep more code managed in the repo.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Shoutout to \",(0,n.jsx)(e.a,{href:\"https://github.com/hashicorp/next-mdx-remote\",children:\"next-mdx-remote\"}),\" and \",(0,n.jsx)(e.a,{href:\"https://react-tweet.vercel.app/\",children:\"react-tweet\"}),\".\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"Performance\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Earlier this year, I moved this blog to the \",(0,n.jsx)(e.a,{href:\"https://nextjs.org/docs/app\",children:\"Next.js App Router\"}),\". That came with a subtle but important change: \",(0,n.jsx)(e.a,{href:\"https://nextjs.org/docs/app/building-your-application/rendering/server-components\",children:\"React Server Components\"}),\" by default.\"]}),`\n`,(0,n.jsx)(e.h3,{children:\"Server Components\"}),`\n`,(0,n.jsx)(e.p,{children:\"Server Components are fun. For example, I can embed tweets inside blog posts:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`<Tweet id=\"1457032789883187201\" />\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"Tweet\"}),\" component handles both data fetching \",(0,n.jsx)(e.em,{children:\"and\"}),\" creating UI, all bundled up in a handy npm package (worth an exception here). Notably, additional Server Components added to my pages aren't increasing the client-side JavaScript bundle. This \\u201Ctemplating\\u201D remains server-only.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Another example is on \",(0,n.jsx)(e.a,{href:\"https://arifin.xyz/work\",children:\"my work page\"}),\". I love that I can drop this component in anywhere:\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`async function Stars() {\n  let res = await fetch('https://api.github.com/repos/vercel/next.js')\n  let json = await res.json()\n  let count = Math.round(json.stargazers_count / 1000)\n  return \\`\\${count}k stars\\`\n}\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"Partial Prerendering\"}),`\n`,(0,n.jsx)(e.p,{children:\"We're also working on something new in Next.js I'm now using here. It enables Next.js to prerender as much of the page as possible to static, leaving holes for dynamic components.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"For example, 98% of this blog post page is work that can be prerendering during the build. However, those view counts at the top of the page should be dynamic on every request. With \",(0,n.jsx)(e.a,{href:\"https://www.partialprerendering.com/\",children:\"Partial Prerendering\"}),\", the code for that looks like:\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-tsx\",children:`async function Views({ slug }: { slug: string }) {\n  let views = await getViewsCount()\n  incrementViews(slug)\n  // ...\n}\n\nexport default function Blog({ params }) {\n  let post = getBlogPosts().find((post) => post.slug === params.slug)\n  // ...\n\n  return (\n    <section>\n      <Suspense fallback={<p className=\"h-5\" />}>\n        <Views slug={post.slug} />\n      </Suspense>\n      <article>{post.content}</article>\n    </section>\n  )\n}\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Everything up to the \",(0,n.jsx)(e.code,{children:\"Suspense\"}),\" boundary, including the \",(0,n.jsx)(e.code,{children:\"fallback\"}),\", can be prerendered. Then, when the request happens, the static shell is instantly shown, followed by the dynamic content (views) streaming in after the fact.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"getViewsCount\"}),\" signals to Next.js that it's dynamic through \",(0,n.jsx)(e.code,{children:\"noStore()\"}),\":\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`export async function getViewsCount() {\n  noStore();\n  let data = await sql\\`\n    SELECT slug, count\n    FROM views\n  \\`;\n\n  return data.rows as { slug: string; count: number }[];\n}\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"And \",(0,n.jsx)(e.code,{children:\"incrementViews\"}),\" is a Server Action that can be called like any JavaScript function:\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`'use server';\n\nimport { sql } from '@vercel/postgres';\n\nexport async function increment(slug: string) {\n  await sql\\`\n    INSERT INTO views (slug, count)\n    VALUES (\\${slug}, 1)\n    ON CONFLICT (slug)\n    DO UPDATE SET count = views.count + 1\n  \\`;\n}\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"I'm really happy with this approach. In the past, I had to include more dependencies like \",(0,n.jsx)(e.code,{children:\"swr\"}),\" and add additional client-side JavaScript to achieve this. Partial Prerendering feels fast, without giving up the dynamic view counts that I love.\"]}),`\n`,(0,n.jsx)(i,{id:\"1793468417800102148\"}),`\n`,(0,n.jsx)(e.h2,{children:\"Opinions\"}),`\n`,(0,n.jsx)(e.p,{children:\"There's an assortment of other opinions I've included here now:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsxs)(e.strong,{children:[\"Prefer \",(0,n.jsx)(e.code,{children:\"let\"}),\" over \",(0,n.jsx)(e.code,{children:\"const\"}),\":\"]}),\" It's fewer characters to write. I'm lazy. Also, this isn't a production codebase here or anything. \",(0,n.jsx)(e.a,{href:\"https://overreacted.io/on-let-vs-const/\",children:\"Nice post here\"}),\" on this topic.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Prefer copy/paste over the wrong abstraction:\"}),\" I removed \",(0,n.jsx)(e.code,{children:\"date-fns\"}),\", \",(0,n.jsx)(e.code,{children:\"clsx\"}),\" / \",(0,n.jsx)(e.code,{children:\"classnames\"}),\", and \",(0,n.jsx)(e.code,{children:\"gray-matter\"}),\" for simple copy-pastable alternatives. Sure, they don't support every single feature. But, I don't need it. And if I do later, maybe I'll bring it back.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Prefer loading SVGs as images:\"}),\" Okay, this one has been hard for me. I've gotten so used to inlining SVGs in React. But starting to change my mind. \",(0,n.jsx)(e.a,{href:\"https://kurtextrem.de/posts/svg-in-js\",children:\"Related reading here\"}),\" and \",(0,n.jsx)(e.a,{href:\"https://benadam.me/thoughts/react-svg-sprites/\",children:\"on svg sprites\"}),\".\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Prefer larger files versus many components:\"}),\" Just works for my brain better. Keep code that changes often close together. Your mileage may vary.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsxs)(e.strong,{children:[\"Prefer colocating most things in \",(0,n.jsx)(e.code,{children:\"app/\"}),\":\"]}),\" Because, \",(0,n.jsx)(e.em,{children:\"why not\"}),\"? Now that it's possible with the App Router I'm probably overusing this, but it feels nice.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Prefer colocating styles with components:\"}),\" Okay, I've been using Tailwind now for many years, but this is still worth mentioning. Similar to my content evolution, I went from CSS \\u2192 Sass \\u2192 styled-components \\u2192 Chakra \\u2192 Tailwind. \",(0,n.jsx)(e.a,{href:\"https://adamwathan.me/css-utility-classes-and-separation-of-concerns\",children:\"Give it a shot\"}),\". P.S. LLMs are very good at Tailwind.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Conclusion\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"As always, my entire site is \",(0,n.jsx)(e.a,{href:\"https://github.com/mustaqimarifin/arifin.xyz\",children:\"open source\"}),\". Feel free to fork it and hack around.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"I've also simplified the cloning process by consolidating everything to a single \",(0,n.jsx)(e.a,{href:\"https://vercel.com/storage/postgres\",children:\"Postgres database\"}),\". It's now where blog views, guestbook entries, and redirects are stored. I still like MySQL, just wanted an excuse to use Vercel Postgres more.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"See you next year for the 2024 blog refresh \\u{1FAE1}\"}),`\n`,(0,n.jsx)(e.hr,{}),`\n`,(0,n.jsx)(e.p,{children:\"\\xB9: Even when I moved to a CMS, I was still writing in MDX. For my developer blog, it's by far the easiest for me to maintain. I've gone the opposite route with custom components backed by a CMS on larger projects, but has always felt unnecessary here.\"}),`\n`,(0,n.jsx)(e.p,{children:\"\\xB2: Surprisingly, there still aren't many great git-like workflows for content that I've enjoyed using. Again, for my blog, having the complete version history tracked in git has been very helpful.\"})]})}function p(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,{...t,children:(0,n.jsx)(h,{...t})}):h(t)}function d(t,e){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+t+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return x(k);})();\n;return Component;",
    "title": "Tits",
    "summary": "Including some of my latest hot takes (okay they are pretty mild).",
    "date": "2023-11-19T00:00:00.000Z",
    "_meta": {
      "filePath": "syntax/index.mdx",
      "fileName": "index.mdx",
      "directory": "syntax",
      "extension": "mdx",
      "path": "syntax"
    },
    "slug": "syntax",
    "wordCount": 1428,
    "readTime": "8 min read",
    "lastModified": "2024-05-25T05:27:11.000Z"
  }
]
