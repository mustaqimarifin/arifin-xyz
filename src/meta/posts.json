[
  {
    "slug": "dd",
    "wordCount": 1691,
    "readTime": "9 min read",
    "data": {
      "title": "Getting started",
      "summary": "Hit the ground running.",
      "date": "2024-03-22"
    },
    "content": "\n\nexport const og = \"/images/sass/h2.jpg\"\n\n\n\n![tits](/images/sass/h2.jpg)\n\n\nThere's been massive innovation in the database and backend space for developers building applications with serverless and edge compute. There are new tools, companies, and even programming models that simplify how developers store data.\n\nThis post will be an overview of databases that pair well with modern application and compute providers.\n\n<Tweet id=\"1788538827314717025\" />\n\n## Criteria\n\nI'll focus on **transactional¬π** workloads instead of analytical¬≤ workloads.\n\nThe ‚Äúbackend‚Äù space is vast: search, analytics, data science, and more ‚Äì so I'll niche down here. The primary criteria of this overview is:\n\n1. Services that work exceptionally well when paired with serverless and edge compute\n2. Services that work with JavaScript and TypeScript codebases\n\n> **Disclaimer:** I work at Vercel, which partners with companies in this post. I also have personally used many of these tools for my own personal projects. My site currently uses PlanetScale and I'm also an angel investor in Supabase (mentioned below).\n\n## A new programming model\n\nRelational databases have been around for 25+ years.\n\nWhile there are new companies creating _serverless-first_ storage solutions, a new programming model is required for workloads to be compatible with serverless compute and modern runtimes.\n\nThese solutions must be:\n\n- **Connectionless:** Developers don't want to think about manual connection management. Traditional database protocols are stateful, whereas HTTP is mostly stateless, making it easier to use with scale to zero compute. Exposed through an SDK or HTTP API, ‚Äúconnectionless‚Äù solutions provide an **abstraction over connection pooling**.\n- **Web native:** Browser data-fetching APIs (e.g. Web `fetch`) and protocols are eating the world. New databases use HTTP APIs or WebSockets, rather than opening direct connections to the database. This makes them compatible with all forms of compute (including the lighter runtime used in edge compute).\n- **Lightweight:** Client libraries (and drivers) are becoming thin. Complexity is shifting to the database vendor, taking on the burden as part of their global infrastructure. For example, their gateway might handle connection pooling or provide caching infrastructure. This has led to a new wave of ORMs (i.e. abstractions to query data) both as standalone libraries and as integrated database SDKs.\n- **(Bonus) Type-safe:** TypeScript developers are favoring databases or libraries which provide tooling to enable type-safe access to your data. For example: [Prisma](https://www.prisma.io/), [Kysely](https://github.com/koskimas/kysely), [Drizzle](https://github.com/drizzle-team/drizzle-orm), [Contentlayer](https://www.contentlayer.dev/), and [Zapatos](https://jawj.github.io/zapatos/).\n\nConsider databases like Postgres. New solutions like Neon and Supabase abstract connection management, providing you with a simple way to query and mutate data. In the case of Supabase, there's a client library that uses an HTTP API [built on PostgREST](https://supabase.com/docs/guides/api):\n\n```jsx\nimport { createClient } from \"@supabase/supabase-js\";\nlet supabase = createClient(\"https://<project>.supabase.co\", \"<your-anon-key>\");\nlet { data } = await supabase.from(\"countries\").select();\n```\n\nAnd for Neon:\n\n```jsx\nimport { Client } from \"@neondatabase/serverless\";\nlet client = new Client(env.DATABASE_URL);\nlet {\n  rows: [{ now }],\n} = await client.query(\"select now();\");\n```\n\nNeon's solution is [particularly interesting](https://neon.tech/notes/serverless-driver-for-postgres/).\n\n> The basic premise is simple: our driver redirects the PostgreSQL wire protocol via a special proxy. Our driver connects from the edge function to the proxy over a WebSocket, telling the proxy which database host and port it wants to reach. The proxy opens a TCP connection to that host and port and relays traffic in both directions.\n\n![Neon](/images/backend/neon.avif)\n\n<Callout emoji=\"üí°\">\n\nUsing WebSockets, instead of HTTP, does have tradeoffs. There might be additional latency on the first request setup, but subsequent requests are faster. There's an [RFC](https://www.rfc-editor.org/rfc/rfc9220.pdf) for WebSockets with `HTTP/3` which would remove that extra network roundtrip.\n\n</Callout>\n\nThe connection management isn't going away ‚Äì it's just being handled by the vendor now.\n\nThere's even solutions like PlanetScale which can handle up to [a million connections](https://planetscale.com/notes/one-million-connections), which also allows you to effectively never think about managing connections.\n\n## Trends\n\nThis new programming model has created emerging trends for database companies:\n\n- Databases are increasingly becoming **data platforms**, including other adjacent solutions like full-text search and analytics.\n- The **decoupling of storage and compute**, popularized by Snowflake (and more), is enabling new players (e.g. Neon et al.) to massively reduce the cost of a ‚Äúdatabase at rest‚Äù. This pairs well with frontend git branch-based workflows, where you want to scale to zero when not being used.\n- Increasingly developers **don't want to ‚Äúdial the knobs‚Äù**. Solutions like DynamoDB (and in some ways S3) provided infinite scale without needing to tweak memory, storage, CPU, clusters, and instances.\n- The dream of **global data** is here, but not how it was predicted. Trying to replicate _all_ data to _every_ network edge is probably not the correct solution most times. Instead, we're seeing specialized data APIs and the emergence of user-specific data stores (e.g. for shopping cart data).\n- More databases are **embracing serverless**, but what ‚Äúserverless‚Äù means to them varies. There are different vectors of autoscaling: connections, storage, compute, and more.\n\n## Databases\n\nI'll bucket these into ‚Äúestablished‚Äù and ‚Äúrising‚Äù categories, serverless/serverful, as well as generally available (GA) and pre-GA. I'll also mostly talk about managed vendors.\n\nFor example, you can of course run MySQL or Postgres on major cloud providers like AWS. There's a long tail of niche data storage solutions, so some will definitely be missing that I haven't heard of or used.\n\n**2024 Update:** A few others providers to add to the list: [Tembo](https://tembo.io), [Nile](https://www.thenile.dev), and [Yugabyte](https://www.yugabyte.com).\n\n### Established serverless solutions\n\n- **DynamoDB**\n  - **[AWS DynamoDB:](https://aws.amazon.com/dynamodb/)** Fully managed, serverless, key-value NoSQL database.\n- **Firebase**\n  - **[Firestore:](https://firebase.google.com/docs/firestore)** Over 10 years old now, Firestore is a well-adopted document database. One unique advantage Firebase is its built-in support for authentication, real-time workloads, and cross-platform support for mobile.\n- **MongoDB**\n  - [Atlas Serverless:](https://www.mongodb.com/use-cases/serverless) MongoDB has an entire data platform, including search / analytics / etc. Their recent investment into serverless is very exciting, with Atlas Serverless now [generally available](https://www.mongodb.com/notes/post/embrace-benefits-serverless-development-atlas). Their [Data API](https://www.mongodb.com/docs/atlas/api/data-api/) makes them a fantastic pair for serverless / edge.\n- **MySQL**\n  - **[PlanetScale](https://planetscale.com/):** MySQL through [Vitess](https://planetscale.com/notes/all-the-tech-planetscale-replaces). Can easily handle quite a [large](https://planetscale.com/notes/one-million-queries-per-second-with-mysql) [scale](https://planetscale.com/notes/one-million-connections) and also includes some nice features to [speed up](https://planetscale.com/notes/introducing-planetscale-boost) and [monitor](https://planetscale.com/notes/introducing-planetscale-insights-advanced-query-monitoring) queries. Their [serverless driver](https://planetscale.com/notes/introducing-the-planetscale-serverless-driver-for-javascript) (`@planetscale/database`) has been easy to use, but I prefer [Kysely](https://github.com/depot/kysely-planetscale).\n- **PostgreSQL**\n  - **[AWS Aurora](https://aws.amazon.com/rds/aurora/serverless/):** One of the first serverless Postgres offerings.\n  - **[CockroachDB](https://www.cockroachlabs.com/notes/announcing-cockroachdb-serverless/):** Autoscales and distributes data across multiple nodes. Focused on high data consistency and integrity. Supports most of Postgres but not stored procedures and extensions.\n- **Redis**\n  - **[Upstash](https://upstash.com/):** Offers durable/consistent Redis, global replication options, and Kafka. Fantastic `@upstash/redis` HTTP/REST client library.\n\n### Rising serverless database solutions\n\n- **Generally Available (GA)**\n  - **[Fauna](https://fauna.com/):** They were an early mover in the serverless data space. I've had success with their GraphQL APIs before, but feel mostly indifferent on [FQL](https://docs.fauna.com/fauna/current/api/fql/).\n- **Pre-GA**\n  - **[Convex](https://www.convex.dev/)**: Fantastic for real-time workloads, but also a very simple, type-safe interface for querying/mutating data. You write (and think) in functions. Pairs well with React's mental model.\n  - **[Grafbase](https://grafbase.com/)**: If you love GraphQL, Grafbase is worth exploring. Designed to integrate into branch-based workflows + fast reads globally. Realtime and full-text search are in the works.\n  - **[Neon:](https://neon.tech/)** Postgres with separation of storage and compute. Uniquely designed for serverless and works with the native Postgres driver + supports database branching workflows.\n  - **[Supabase](https://supabase.com/):** Open-source, built-on pure Postgres. [Database](https://supabase.com/database) + [Auth](https://supabase.com/auth) + [Storage](https://supabase.com/storage) and more. Scales up on pay-as-you-go, and [working on scale to zero](https://supabase.com/notes/supabase-series-b#where-were-going).\n  - **[Xata](https://xata.io/)**: Not only a database, but search / analytics as well. I'm a fan of their spreadsheet-like UI, which is approachable for a wider audience.\n- _+ Long tail of new providers that can do DB hosting (Railway, Render, Fly, etc)._\n\n### Stateful backends and other solutions\n\n- **Generally Available (GA)**\n  - **[AlloyDB](https://cloud.google.com/alloydb):** Very exciting innovation coming from Google. AlloyDB is unique because it can handle both transactional¬π and analytical¬≤ workloads.\n  - **[Ably](https://ably.com/):** Realtime infrastructure with [queues support](https://ably.com/docs/general/queues) and other message durability options.\n  - **[Crunchy Postgres](https://www.crunchydata.com/):** Crunchy Postgres is [\"just Postgres\"](https://changelog.com/news/just-postgres-LWm4). Focused on performance and availability, cost-effectiveness, and supporting all native Postgres features.\n  - **[Hasura:](https://hasura.io/)** Makes it easy to connect data from many different sources and expose it as a GraphQL API. Can use Neon under-the-hood as the database provider.\n  - **[Liveblocks](https://liveblocks.io/):** Realtime collaboration infrastructure, they offer persistent [conflict-free data](https://liveblocks.io/conflict-free-data-types) along with APIs for document browsing, permissions management, database sync. Beautiful design and documentation.\n  - **[Replicache](https://replicache.dev/)**: More of a database _synchronization engine_ that can be coupled with other solutions with no real-time solution. We use this for [comments on Vercel previews](https://vercel.com/notes/making-live-reviews-a-reality-enhanced-preview-experience).\n  - **[TimeScale](https://www.timescale.com/):** For both transactional and analytical workloads. Adds many features found in NoSQL databases to Postgres, and also integrates with S3 for storage.\n- **Pre-GA**\n  - **[ChiselStrike](https://www.chiselstrike.com/):** Write your TypeScript class, generate an API. Really leaning into the ‚Äúinfrastructure from code‚Äù approach, you write and think in functions, somewhat similar to Convex.\n  - **[EdgeDB](https://www.edgedb.com/):** EdgeDB is challenging the status quo. Particularly the ‚Äúmerger‚Äù between ORM / database, more than just a query builder, but a way to _optimize_ queries.\n  - **[Nhost:](https://nhost.io/)** Firebase, but with GraphQL. Built on Hasura, Postgres, and S3.\n  - [Rowy:](https://www.rowy.io) Low-code, spreadsheet-like backend (almost like an open-source Airtable) but they also have the ability to write functions to mutate data.\n  - [SurrealDB:](https://surrealdb.com/) Has its own SQL-flavored syntax, also trying to provide the spreadsheet-like UI for viewing data (still waitlist access, haven't used it).\n  - **[Tigris:](https://www.tigrisdata.com/)** Document database, focused on real-time and also includes full-text search.\n  - **[WunderGraph:](https://wundergraph.com/)** Trying to lead with an excellent ORM / client library (end-to-end type safety, GraphQL support) and wedge into a cloud product (still waitlist access, haven't used it).\n- **Other Solutions**\n  - **Caching Engines:** [Stellate](https://stellate.co/), [Prisma Accelerate](https://www.prisma.io/data-platform/accelerate), [ReadySet](https://readyset.io/).\n  - **Cloud Provider Offerings:** Azure SQL, Azure CosmosDB, Google Cloud SQL, Google BigTable, and many more.\n  - **Content Management (Headless CMS):** These can still act as a database, just a different domain-specific solution. [Sanity](https://www.sanity.io/), [Contentful](https://www.contentful.com/), [Sitecore](https://www.sitecore.com/), and more.\n\n---\n\n¬π Commonly referred to as OLTP (Online _Transactional_ Processing). These are for CRUD operations, most commonly the MySQL and Postgres databases of the world.\n\n¬≤ Commonly referred to as OLAP (Online _Analytical_ Processing). These are for your real-time data workloads, like [Clickhouse](https://clickhouse.com/) (also [Tinybird](https://www.tinybird.co/)), [SingleStore](https://www.singlestore.com/), [TimeScale](https://www.timescale.com/), and [ElasticSearch](https://www.elastic.co/).\n\n_Thanks to [Guillermo Rauch](https://twitter.com/rauchg), [Paul Copplestone](https://twitter.com/kiwicopple), [Fredrik Bj√∂rk](https://twitter.com/fbjork), [Anthony Shew](https://twitter.com/anthonysheww), [Craig Kerstiens](https://twitter.com/craigkerstiens), [Jamie Turner](https://twitter.com/jamwt), [Nikita Shamgunov](https://twitter.com/nikitabase), [Yoko Li](https://twitter.com/stuffyokodraws), [Pratyush Choudhury](https://twitter.com/177pc), [Stas Kelvich](https://twitter.com/kelvich), [Enes Akar](https://twitter.com/enesakar), and [Steven Tey](https://twitter.com/steventey) for reviewing this post._\n"
  },
  {
    "slug": "developer-marketing",
    "wordCount": 1313,
    "readTime": "8 min read",
    "data": {
      "title": "On Developer Marketing",
      "date": "2024-03-21",
      "summary": "Developer marketing is not traditional marketing."
    },
    "content": "\nWhat influences developers to adopt a product?\n\nTrust. The tools they adopt and advocate for impact their reputation. You might have heard ‚Äúno one ever got fired for buying IBM‚Äù in reference to making good choices.\n\nBut picking older, well-adopted tools can be at odds with how fast the industry moves. Is there a newer alternative that solves my needs better? Ask your developer.\n\nKeeping up the latest trends is part of their job. They need to know what's a fad and what's here to stay. This is why experienced developers become skeptical of almost everything. It's hard to earn their trust.\n\nDeveloper marketing is about building trust. Here's what's worked for me.\n\n## How can I improve my developer marketing?\n\n1. Don‚Äôt publish content you wouldn‚Äôt share yourself.\n2. Always consider how you can build developer trust. It‚Äôs not a one-time transaction. It‚Äôs reflected in every product and marketing decision you make.\n3. When something sucks with your product, own it. Don‚Äôt try to hide the failure. Lean into it. Bring the community along for the continuous iteration of your product. ‚ÄúYou told us this was bad, and we fixed it‚Äù. Follow up with people after you ship.\n4. Get involved in the community. Host, attend, or sponsor a hackathon or meetup. Spend time talking to developers 1:1. Their feedback drives product improvements _and_ content ideas. Where are people struggling? Write about that.\n5. Create a [developer experience so good](https://arifin.xyz/notes/developer-experience-examples) that it does marketing for you. Write docs worth sharing, filled with helpful diagrams and detailed descriptions. Create code examples and templates that help developers get started quickly.\n\n## Throw out the old playbook\n\nDevelopers _love_ great marketing, but most companies get it wrong.\n\nThey‚Äôre trying to apply the enterprise marketing playbook to the wrong audience.\n\n- **Enterprise Marketing**\n  - **Goal**: Grow pipeline and revenue\n  - **Audience**: Directors, VPs, or C-suite\n  - **Buyer Interests**: Increased efficiency, cost savings, innovation\n  - **How**: Sales-served, sign a yearly contract for a discount\n- **Developer Marketing**\n  - **Goal**: Grow retained signups and community awareness\n  - **Audience**: Individual developers\n  - **Buyer Interests**: Transferable skills, affordable, great developer experience\n  - **How**: Self-serve, start free then swipe a credit card\n\n## What does great developer marketing look like?\n\nI‚Äôm a developer who [works](/work) at the intersection of engineering, product, and marketing. Based on my experience, the best developer marketing:\n\n1. **Teaches how to build great products**\n2. **Builds and retains trust**\n3. **Uses precise language**\n\n### How did they build that!?\n\nWhen I see a great developer tool, my first thought is: **how did they build that?**\n\n<StaticTweet id=\"1683856255012462593\" />\n\nThere‚Äôs a natural curiosity. I want to reverse engineer the product and [learn new tools](https://vercel.com/notes/introducing-next-js-commerce-2-0) or skills I can apply to my work.\n\nThe best developer marketing shows how to build great product experiences. Bonus points if you capture the ‚Äúcurrent thing‚Äù ‚Äì a new AI tool, or a popular style of app (TikTok clone).\n\nGreat developer marketing is invoking this response as a service.\n\n<StaticTweet id=\"1744201046627356885\" />\n\n### Zero days since the latest JavaScript framework\n\nDevelopers don‚Äôt try your product the first time they hear about it. They certainly don‚Äôt want to talk to someone to get access first.\n\nThey need to hear positive feedback several times before they trust it enough to try. That's why **building, growing, and retaining developer trust is everything.**\n\nTrust comes from your marketing being helpful regardless of the product. And retention comes from [making something developers actually want](/notes/make-something-developers-want).\n\nIndividual developers are tired of enterprise marketing being used on them. They‚Äôre the wrong audience‚Äîthey don‚Äôt want the cold calls or unhelpful emails. And if you lose their trust, they‚Äôre quick to move on to other products.\n\n![I don't want to play with you anymore](/developer-marketing/toy-story.webp)\n\nTrust is built (or lost) through the content you create and put out into the community. It‚Äôs a reflection of what you stand for.\n\nHere are some of my red flags when reading developer content:\n\n- **Buzzwords and acronyms**: Sometimes these are necessary, but there‚Äôs a lot of copywriting that looks like ‚Äúcutting-edge, LLM-powered RAG platform‚Äù when it should really be ‚Äúbring knowledge to your AI model‚Äù. Acronyms also alienate newcomers.\n- **Misusing technical terms**: \"Our JavaScript framework helps you make responsive websites‚Äù ‚Äì does it though, or is that CSS? This can degrade trust because it shows the author might not have a deep understanding of the subject. Another example is broken or incorrectly formatted code examples. Did they even check that it works?\n- **Overpromising simplicity**: The developer ecosystem is too obsessed with simplicity. I‚Äôm guilty. While ‚Äúget started in one click‚Äù might be good sometimes, it can also be harmful. Maybe I want more options? \"Simply install our SDK\" might not be as simple as it sounds.\n- **Vague explanations**: Developers want a practical example of what your product does. ‚ÄúUtilizing the latest technology to supercharge your development process‚Äù. Is this an editor, framework, database, or something else?\n\nDevelopers are more likely to trust open-source tools. These tools likely [have a community](https://janairis.medium.com/five-pillars-of-building-developer-communities-at-hashicorp-9c8f50198eb8) of other developers learning together. They can take their knowledge of the tool from job to job as they grow in their career.\n\n### Show, don‚Äôt tell\n\nGreat developer marketing is both _concise_ and _precise_.\n\nIt values your time‚Äîevery word matters. Show them how to build interesting things, don‚Äôt fill a post with 1000 words of garbage.\n\nConsider an email announcing a new version of your product. The pricing has changed, and there's a data migration.\n\n- **How can I make it concise?**\n  - **Put the bottom line up front**: If I stop reading after the first paragraph, did I get what I needed to know? Is there action required? Put that in the email subject line.\n  - **Make it easy to scan**: The visual flow of the content is as important as the words you choose. They should be able to quickly scan for landmarks (like code examples or commands they need to run).\n- **How can I make it precise?**\n  - **Address their fears directly**: This email mentions a migration. Am I going to lose my data? Do I need to make changes right away? Am I going to be charged more?\n  - **Personalize the content**: Show them their team name, the date the migration starts and finishes in UTC, exactly how much their price was before and after, and how they can take action (maybe a CLI command that shows their usage).\n\n## What do you want them to remember?\n\nYour product is competing between thousands of others for developer mindshare. You believe yours is better. How do you share that message?\n\nLet the product speak for itself. Listen to customer feedback and iterate. If your marketing isn‚Äôt working, their feedback should tell you why.\n\n<StaticTweet id=\"1505668279678824448\" />\n\nThis tweet is provocative, but it makes a point: you can't fix a bad product with more marketing and sales. When you believe in the product, you don‚Äôt need to speak down against others. I prefer to do the opposite.\n\nI believe in optimism for software, the web, and the community I‚Äôm building. I want people to remember I was helpful, positive, and enthusiastic about the product.\n\n## Wait, what about DevRel?\n\n[Developer Relations](/notes/devrel-at-vercel) is more than only developer marketing. It's the intersection between product, engineering, marketing, and sales.\n\nFor early companies, you might only need DevRel. They are generalists. But as you grow, you need to specialize. Get the right leaders for both developers and enterprise marketing.\n\nDeveloper marketing leaders come from non-marketing roles (engineering, developer relations). They love showing developers how to build amazing things.\n\nEnterprise marketing leaders come from traditional marketing roles (content, product marketing, growth). They can sell to developers, even if not one, and know how to build a pipeline generating engine.\n\nIt‚Äôs possible for one person to do both sides of marketing well, but rare.\n"
  },
  {
    "slug": "css",
    "wordCount": 1244,
    "readTime": "7 min read",
    "data": {
      "title": "How I'm Writing CSS in 2024",
      "date": "2024-01-07",
      "summary": "Notes on the state of the CSS ecosystem and tooling."
    },
    "content": "\nCSS in 2024 is amazing.\n\n- Cross-browser support for [nesting](https://caniuse.com/css-nesting), [:has()](https://caniuse.com/css-has), [container queries](https://caniuse.com/css-container-queries), and more¬π\n- [Powerful](https://stylexjs.com/) and [fast](https://lightningcss.dev/) new CSS tools\n- Many frameworks and compilers to help optimize CSS loading performance\n\nThis post will be a collection of my notes and thoughts about the CSS ecosystem and the tools I'm currently using.\n\n## Design Constraints\n\n### User Experience\n\nWhat does a great experience look like loading stylesheets when visiting a website?\n\n1. Stylesheets should load as fast as possible (small file sizes)\n1. Stylesheets should not re-download unless changed (proper caching headers)\n1. The page content should have minimal or no layout shift\n1. Fonts should load as fast as possible and minimize layout shift\n\n### Developer Experience\n\nOur tools must help us create better user experiences. The developer experience, while important, can't come before the user experience.\n\nHow can the DX of the styling tools we use help us create a better UX?\n\n1. Prune unused styles, minify, and compress CSS for smaller file sizes\n1. Generate hashed file names to enable safe, immutable caching¬≤\n1. Bundle CSS files together to make fewer network requests\n1. Prevent naming collisions to avoid visual regressions\n\nWhat about to help us write more maintainable, enjoyable CSS?\n\n1. Easy to delete styles when deleting corresponding UI code\n1. Easy to adhere to a design system or set of themes\n1. Editor feedback with TypeScript support, autocompletion, and linting\n1. Receive tooling feedback in-editor to prevent errors (type checking, linting)\n\n## CSS in 2024\n\nIt's never been easier to write great styles without any additional tooling.\n\nThe example below uses many of the latest CSS features supported cross browser without any build step. You might not need Sass or Less anymore!\n\nDoes that mean the tooling is no longer necessary? For some people, yes.\n\n### Build Steps\n\nTo meet the [design constraints above](#design-constraints), you'll likely need a build step.\n\nIt's unlikely all your users are on the latest browser versions. But more importantly, there will always be newer syntax that isn't yet supported cross-browser you will want to use.\n\nYou _can_ manually write [@supports](https://developer.mozilla.org/en-US/docs/Web/CSS/@supports) rules to check for browser support, but that's only solving some of the problems. Rather than leaving the CSS optimization to humans, [why not let the machines handle it](https://csswizardry.com/2023/10/the-three-c-concatenate-compress-cache/)?\n\n### Compilation\n\nCompilers make the following workflow easy:\n\n1. Automatically remove any unused styles, bundle files together to make fewer network requests, add vendor prefixes, and minify the output by removing white spaces and comments\n1. Automatically generate unique file names, allowing frameworks to set caching headers like `immutable` signaling to browsers the content will never change\n1. Specify target browsers ([browserslist](https://browsersl.ist/)) and have [syntax lowering](https://lightningcss.dev/transpilation.html) to compile modern CSS features to work with those browsers\n\n### Streaming CSS\n\nYou visit Google to book a flight. It can't precompute your intent, so you're given a search bar for the initial UI. You search `\"Flight SFO to NYC\"` and the server streams in a flights widget to select dates.\n\nThere is no way Google could have included every possible widget ahead of time. Currency conversions, timers, live sports scores, you name it. The UI and styles for these widgets need to be dynamically streamed in.\n\nReact (and Next.js) now support this pattern with [streaming SSR](https://nextjs.org/docs/app/building-your-application/routing/loading-ui-and-streaming) and [CSS](https://github.com/reactwg/react-18/discussions/108). In the React model, you define your UI as components which have dependencies on styles. How can we safely stream in styles for the a widget without affecting anything on the page?\n\nStyles need to be scoped, or atomic, so that if they load earlier than the DOM content they're intended to style, they don't alter the style of elements already on the page.\n\nFor example, [CSS Modules](#css-modules) have styling rules scoped to the component that imports it. [Tailwind](#tailwind-css) uses atomic utility classes, which are compiled into a single stylesheet that's loaded before any classes are used. [StyleX](#stylex) generates atomic classes as well. Global styles don't work well with streaming unless loaded at the beginning of the stream.\n\n## My Recommendations\n\n### CSS Modules\n\nCSS Modules are a small but impactful enhancement on top of vanilla CSS.\n\nThey achieve our desired UX constraints and most (but not all) of our DX constraints. They're available in [almost every modern bundler and framework](https://github.com/css-modules/css-modules/blob/master/docs/get-started.md). You can copy / paste existing CSS selectors and they'll work in a CSS Module without any changes.\n\nThey can't generate atomic styles. They don't support using many themes (just CSS variables). And because the styling code lives outside your TypeScript files, you don't get type safety and autocompletion. But those constraints might be fine for you.\n\n<Callout emoji=\"üí°\">\n\n[Lightning CSS](https://lightningcss.dev/), which supports CSS Modules, is used by Vite, and [soon by Tailwind](https://medium.com/@bomber.marek/whats-tailwind-oxide-engine-the-next-evolution-of-tailwind-css-32e7ef8e19a1) and [Next.js](https://twitter.com/vmprmyth/status/1740124461683409042). Tools like `postcss` and `autoprefixer` are being replaced by faster, [all-in-one Rust toolchains](https://arifin.xyz/notes/rust).\n\n</Callout>\n\n### Tailwind CSS\n\nTailwind uses a compiler to generate only the classes used. So while the utility CSS framework contains _many_ possible class names, only the classes used (e.g. `\"font-bold text-2xl\"`) will be included in the single, compiled CSS file.\n\nAssuming you only write Tailwind code, your bundle will never be larger than the total set of used Tailwind classes. It's extremely unlikely you would use them _all_. This means you have a fixed upper bound on the size of the generated CSS file, which is then minified, compressed, and cached for the best performance.\n\nYou don't have to _only_ write Tailwind styles. Tailwind classes are just utilities for normal CSS that adhere to a design system. You can mix and match Tailwind with CSS Modules, for example.\n\nTailwind doesn't come without tradeoffs. There's a bucket of tools that pair with it:\n\n- [VSCode integration](https://tailwindcss.com/docs/editor-setup#intelli-sense-for-vs-code) for autocompletion, linting, syntax highlighting, and more\n- [Prettier integration](https://tailwindcss.com/docs/editor-setup#automatic-class-sorting-with-prettier) for automatic sorting of class names\n\nThe most controversial part about Tailwind is the syntax. It's both [loved](https://twitter.com/whiskeywebfm/status/1742222761018212460) and hated. I didn't appreciate Tailwind until I built something with it, so I'd recommend trying that if your initial reaction is adverse.\n\n### StyleX\n\nThere are two issues with most CSS-in-JS libraries:\n\n1. **Performance:** Components must convert the styles written in JS into CSS to be inserted into the document when rendering. This can have a [significant](https://dev.to/srmagura/why-were-breaking-up-wiht-css-in-js-4g9b) cost and is why [libraries](https://panda-css.com/docs/overview/why-panda) are moving to ‚Äúzero runtime‚Äù libraries like StyleX.\n1. **Compatibility:** Many existing CSS-in-JS libraries have added support for React's streaming server-rendering, but are still incompatible with other performance optimizations like moving parts of your application to [React Server Components](https://nextjs.org/docs/app/building-your-application/rendering/server-components).\n\nTo solve these issues, ‚Äúzero runtime‚Äù CSS-in-JS libraries like [Vanilla Extract](https://vanilla-extract.style/), [Panda](https://panda-css.com/), and others have been created.\n\nStyleX is the latest CSS-in-JS library, which [solves these problems and more](https://stylexjs.com/docs/learn/thinking-in-stylex/). I'd recommend reading through [‚ÄúThinking in StyleX‚Äù](https://stylexjs.com/docs/learn/thinking-in-stylex/) if you want to dig in.\n\n[This example](https://codesandbox.io/p/devbox/cocky-tu-x7twwd?file=%2FApp.tsx) was my first time using StyleX. While it's still new to open-source (and the ecosystem reflects that), it's _not_ a new library. It powers all the Meta sites: Facebook, Instagram, WhatsApp, and Threads.\n\nYou still have to name things though ü´† Enter `buttonWrapperContainer`.\n\n## Conclusion\n\nIs CSS... fun for me now? I guess so. I'm excited to see what the next few years bring.\n\nWould you have picked something different? Did I miss anything? [Lmk](https://twitter.com/vmprmyth).\n\n---\n\n¬π: More: [linear() easing](https://developer.mozilla.org/en-US/docs/Web/CSS/easing-function), [subgrid](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_grid_layout/Subgrid), [dynamic viewport units](https://web.dev/notes/viewport-units), [color spaces](https://developer.chrome.com/notes/meet-the-new-css-color-spaces), and [@layer](https://developer.mozilla.org/en-US/docs/Web/CSS/@layer).\n\n¬≤: Since the file names are guaranteed to be unique, you can set the `immutable` caching header to tell browsers the content will never change. This allows browsers to cache the file forever, which is great for performance.\n"
  },
  {
    "slug": "2023",
    "wordCount": 1418,
    "readTime": "8 min read",
    "data": {
      "title": "2023 Blog Refresh",
      "date": "2023-11-19",
      "summary": "Including some of my latest hot takes (okay they are pretty mild)."
    },
    "content": "\nI updated my blog this weekend and wanted to share some thoughts along the way:\n\n- [Content Management](#content-management)\n  - [Retrieving Content](#retrieving-content)\n  - [Remark and Rehype](#remark-and-rehype)\n  - [Dependency Minimalism](#dependency-minimalism)\n- [Performance](#performance)\n  - [Server Components](#server-components)\n  - [Partial Prerendering](#partial-prerendering)\n- [Opinions](#opinions)\n- [Conclusion](#conclusion)\n\n<Callout emoji=\"‚ö†Ô∏è\">\n\n**Disclaimer:** My site is my ‚Äúbreakable toy‚Äù. I enjoy and _intentionally_ change technology and try new patterns here. I'd encourage you to do the same and then write about why you made those choices.\n\n</Callout>\n\n## Content Management\n\nI've moved my content from HTML to vanilla Markdown, to MDX, to a CMS, and back to MDX over the years. My content requirements as of now are:\n\n1. Written in Markdown¬π\n2. Support for syntax highlighting, embedded tweets, and other components\n3. Managed through version control¬≤\n4. Minimal external dependencies\n\nMy goal was to simplify without giving up too many features.\n\n### Retrieving Content\n\nYou can go surprisingly far with just Node.js and JavaScript. You'll notice a theme start to emerge in this blog post: fewer dependencies, and more copy/paste-able code.\n\nI removed the following libraries:\n\n- `contentlayer`\n- `next-contentlayer`\n- `rehype-autolink-headings`\n- `rehype-pretty-code`\n- `rehype-slug`\n- `remark-gfm`\n- `shiki`\n\nI was still able to maintain almost all of my content requirements with not much code. For example, here's how I'm able to retrieve all of my blog posts:\n\n```js\nimport fs from \"fs\";\nimport path from \"path\";\n\nfunction getMDXFiles(dir) {\n  return fs.readdirSync(dir).filter((file) => path.extname(file) === \".mdx\");\n}\n\nfunction readMDXFile(filePath) {\n  let rawContent = fs.readFileSync(filePath, \"utf-8\");\n  return parseFrontmatter(rawContent);\n}\n\nfunction getMDXData(dir) {\n  let mdxFiles = getMDXFiles(dir);\n  return mdxFiles.map((file) => {\n    let { metadata, content } = readMDXFile(path.join(dir, file));\n    let slug = path.basename(file, path.extname(file));\n    return {\n      metadata,\n      slug,\n      content,\n    };\n  });\n}\n\nexport function getBlogPosts() {\n  return getMDXData(path.join(process.cwd(), \"content\"));\n}\n```\n\nThat's not too bad. So what am I missing? Well, Contentlayer gives you Fast Refresh for your content. That's nice. You can [workaround this](https://github.com/gaearon/overreacted.io/pull/797) or just use `@next/mdx`, which I might do. Contentlayer has other features, too, but they're unnecessary for my blog.\n\n### Remark and Rehype\n\nWhat about the AST modifications for auto-linking headings, adding IDs, and supporting syntax highlighting? I don't know why I didn't think of this before, but you can just‚Ä¶ use React components.\n\n```jsx\nimport { highlight } from \"sugar-high\"; // 1KB new dependency\n\n// This replaces rehype-pretty-code and shiki\nfunction Code({ children, ...props }) {\n  let codeHTML = highlight(children);\n  return <code dangerouslySetInnerHTML={{ __html: codeHTML }} {...props} />;\n}\n\n// This replaces rehype-slug\nfunction slugify(str) {\n  return str\n    .toString()\n    .toLowerCase()\n    .trim() // Remove whitespace from both ends of a string\n    .replace(/\\s+/g, \"-\") // Replace spaces with -\n    .replace(/&/g, \"-and-\") // Replace & with 'and'\n    .replace(/[^\\w\\-]+/g, \"\") // Remove all non-word characters except for -\n    .replace(/\\-\\-+/g, \"-\"); // Replace multiple - with single -\n}\n\n// This replaces rehype-autolink-headings\nfunction createHeading(level) {\n  return ({ children }) => {\n    let slug = slugify(children);\n    return React.createElement(\n      `h${level}`,\n      { id: slug },\n      [\n        React.createElement(\"a\", {\n          href: `#${slug}`,\n          key: `link-${slug}`,\n          className: \"anchor\",\n        }),\n      ],\n      children,\n    );\n  };\n}\n```\n\nOh and that `remark-gfm` I was using for the GitHub style Markdown tables? Again, you can use a React component for that.\n\n```jsx\nfunction Table({ data }) {\n  let headers = data.headers.map((header, index) => (\n    <th key={index}>{header}</th>\n  ));\n  let rows = data.rows.map((row, index) => (\n    <tr key={index}>\n      {row.map((cell, cellIndex) => (\n        <td key={cellIndex}>{cell}</td>\n      ))}\n    </tr>\n  ));\n\n  return (\n    <table>\n      <thead>\n        <tr>{headers}</tr>\n      </thead>\n      <tbody>{rows}</tbody>\n    </table>\n  );\n}\n```\n\n### Dependency Minimalism\n\nWhy go through all of this work to delete dependencies?\n\nAfter having a blog for 10 years, I've gained a new appreciation for keeping things simple. Now, I'm not going _full_ minimalist here. I still want nice things. But I'm taking more opportunities to simplify and keep more code managed in the repo.\n\nShoutout to [next-mdx-remote](https://github.com/hashicorp/next-mdx-remote) and [react-tweet](https://react-tweet.vercel.app/).\n\n## Performance\n\nEarlier this year, I moved this blog to the [Next.js App Router](https://nextjs.org/docs/app). That came with a subtle but important change: [React Server Components](https://nextjs.org/docs/app/building-your-application/rendering/server-components) by default.\n\n### Server Components\n\nServer Components are fun. For example, I can embed tweets inside blog posts:\n\n```jsx\n<Tweet id=\"1457032789883187201\" />\n```\n\nThe `Tweet` component handles both data fetching _and_ creating UI, all bundled up in a handy npm package (worth an exception here). Notably, additional Server Components added to my pages aren't increasing the client-side JavaScript bundle. This ‚Äútemplating‚Äù remains server-only.\n\nAnother example is on [my work page](https://arifin.xyz/work). I love that I can drop this component in anywhere:\n\n```jsx\nasync function Stars() {\n  let res = await fetch(\"https://api.github.com/repos/vercel/next.js\");\n  let json = await res.json();\n  let count = Math.round(json.stargazers_count / 1000);\n  return `${count}k stars`;\n}\n```\n\n### Partial Prerendering\n\nWe're also working on something new in Next.js I'm now using here. It enables Next.js to prerender as much of the page as possible to static, leaving holes for dynamic components.\n\nFor example, 98% of this blog post page is work that can be prerendering during the build. However, those view counts at the top of the page should be dynamic on every request. With [Partial Prerendering](https://www.partialprerendering.com/), the code for that looks like:\n\n```tsx\nasync function Views({ slug }: { slug: string }) {\n  let views = await getViewsCount();\n  incrementViews(slug);\n  // ...\n}\n\nexport default function Blog({ params }) {\n  let post = getBlogPosts().find((post) => post.slug === params.slug);\n  // ...\n\n  return (\n    <section>\n      <Suspense fallback={<p className=\"h-5\" />}>\n        <Views slug={post.slug} />\n      </Suspense>\n      <article>{post.content}</article>\n    </section>\n  );\n}\n```\n\nEverything up to the `Suspense` boundary, including the `fallback`, can be prerendered. Then, when the request happens, the static shell is instantly shown, followed by the dynamic content (views) streaming in after the fact.\n\n`getViewsCount` signals to Next.js that it's dynamic through `noStore()`:\n\n```jsx\nexport async function getViewsCount() {\n  noStore();\n  let data = await sql`\n    SELECT slug, count\n    FROM views\n  `;\n\n  return data.rows as { slug: string; count: number }[];\n}\n```\n\nAnd `incrementViews` is a Server Action that can be called like any JavaScript function:\n\n```jsx\n'use server';\n\nimport { sql } from '@vercel/postgres';\n\nexport async function increment(slug: string) {\n  await sql`\n    INSERT INTO views (slug, count)\n    VALUES (${slug}, 1)\n    ON CONFLICT (slug)\n    DO UPDATE SET count = views.count + 1\n  `;\n}\n```\n\nI'm really happy with this approach. In the past, I had to include more dependencies like `swr` and add additional client-side JavaScript to achieve this. Partial Prerendering feels fast, without giving up the dynamic view counts that I love.\n\n<StaticTweet id=\"1723494155220054489\" />\n\n## Opinions\n\nThere's an assortment of other opinions I've included here now:\n\n- **Prefer `let` over `const`:** It's fewer characters to write. I'm lazy. Also, this isn't a production codebase here or anything. [Nice post here](https://overreacted.io/on-let-vs-const/) on this topic.\n- **Prefer copy/paste over the wrong abstraction:** I removed `date-fns`, `clsx` / `classnames`, and `gray-matter` for simple copy-pastable alternatives. Sure, they don't support every single feature. But, I don't need it. And if I do later, maybe I'll bring it back.\n- **Prefer loading SVGs as images:** Okay, this one has been hard for me. I've gotten so used to inlining SVGs in React. But starting to change my mind. [Related reading here](https://kurtextrem.de/posts/svg-in-js) and [on svg sprites](https://benadam.me/thoughts/react-svg-sprites/).\n- **Prefer larger files versus many components:** Just works for my brain better. Keep code that changes often close together. Your mileage may vary.\n- **Prefer colocating most things in `app/`:** Because, _why not_? Now that it's possible with the App Router I'm probably overusing this, but it feels nice.\n- **Prefer colocating styles with components:** Okay, I've been using Tailwind now for many years, but this is still worth mentioning. Similar to my content evolution, I went from CSS ‚Üí Sass ‚Üí styled-components ‚Üí Chakra ‚Üí Tailwind. [Give it a shot](https://adamwathan.me/css-utility-classes-and-separation-of-concerns). P.S. LLMs are very good at Tailwind.\n\n## Conclusion\n\nAs always, my entire site is [open source](https://github.com/mustaqimarifin/arifin.xyz). Feel free to fork it and hack around.\n\nI've also simplified the cloning process by consolidating everything to a single [Postgres database](https://vercel.com/storage/postgres). It's now where blog views, guestbook entries, and redirects are stored. I still like MySQL, just wanted an excuse to use Vercel Postgres more.\n\nSee you next year for the 2024 blog refresh ü´°\n\n---\n\n¬π: Even when I moved to a CMS, I was still writing in MDX. For my developer blog, it's by far the easiest for me to maintain. I've gone the opposite route with custom components backed by a CMS on larger projects, but has always felt unnecessary here.\n\n¬≤: Surprisingly, there still aren't many great git-like workflows for content that I've enjoyed using. Again, for my blog, having the complete version history tracked in git has been very helpful.\n"
  },
  {
    "slug": "community-messaging-fit",
    "wordCount": 334,
    "readTime": "3 min read",
    "data": {
      "title": "Community-Messaging Fit",
      "date": "2023-03-07",
      "summary": "Community-messaging fit is when you've found the right description of the product that connects with the majority of your community."
    },
    "content": "\nFor startups, having product-market fit means you're building the right product for the right people. For DevRel, having community-messaging fit means you're using the right words to describe the product for that community.\n\nThis post will outline a few examples of how I've found community-messaging fit and some tips to help you iterate with your messaging.\n\n## What is Community-Messaging Fit?\n\nMarketing to developers should be **clear** and **relatable**.\n\n- **Clear**‚Äî_not_ simple. The product often isn't simple, but the impact can be clear. If your explanation isn't clear yet, iterate and try again.\n- **Relatable**‚Äî_not_ obscure. Use language or analogies the community is familiar with. Connect new concepts with existing technologies or mental models.\n\nYour community members have unique backgrounds. They've learned to code from university, bootcamps, or are self-taught. They started with C, or PHP, or Python, or JavaScript. Different descriptions of your product will connect with groups of the community.\n\n**Community-messaging fit is when you've found the right description of the product that connects with the majority of your community.**\n\nFinding your fit isn't a one-time process. Your product will evolve and your community will grow. You have to be constantly iterating on the right messaging.\n\n## Finding Community-Messaging Fit\n\nTwo good indicators for community-messaging fit are **virality** and **sharability**.\n\nDevelopers _want_ to share good content. When they've learned something new, or found a new way to explain a topic they're interested in, they will voluntarily amplify to their audience. When they have a ‚Äúlightbulb moment‚Äù, they want to share this excitement.\n\nWhen the topic is explained clearly, and it relates back to things the developer understands, it makes it easily sharable. This is how virality happens.\n\nCommunity-messaging fit is never finished because your community is ever-evolving.\n\nYou take the input (questions, objections) and iterate towards the new output (analogies, clarifications). If you're not seeing virality, keep tweaking the message until it's clear and relatable. Build an inventory of analogies and examples to help connect the dots with the community.\n"
  },
  {
    "slug": "devrel-at-vercel",
    "wordCount": 210,
    "readTime": "2 min read",
    "data": {
      "title": "What is Developer Relations?",
      "date": "2022-05-09",
      "summary": "My opinion on what DevRel is and how it should be done."
    },
    "content": "\nDeveloper Relations is the intersection between coding, teaching, and community building. It's a space where you can take a love for technology, share it with a community, and help others along the way.\n\n## What do they do?\n\n- **Community:** DevRel are community builders. They run events and are active wherever the community lives. The community can then can ask questions, share knowledge, and grow together. Your community becomes the advocates for your product.\n- **Education:** DevRel teach other developers. Writing blogs, making videos, and building examples. They spread awareness and educate developers about the product. They must be helpful and honest.\n- **Product:** DevRel can play a critical role in shaping the product. They can translate developer pain into the product roadmap. This more than product documentation. It's a curiosity for how to improve the developer experience. They must have empathy for developers.\n\n## What makes a great DevRel?\n\n- You love writing.\n- You love building.\n- You are an exceptional engineer and you love learning new technology.\n- You have a passion for technology and a desire to share it with others.\n- You enjoy talking about technology, while having empathy for others views.\n- You enjoy helping others. You give more than you take.\n"
  },
  {
    "slug": "career",
    "wordCount": 1412,
    "readTime": "8 min read",
    "data": {
      "title": "How I Became a Software Engineer (From Designer to Developer)",
      "date": "2021-07-19",
      "summary": "Learn about my overnight success story, ten years in the making."
    },
    "content": "\nHow did I go from a designer to a developer? In this post, I'll share my overnight success story ‚Äì ten years in the making. First, we have to go way back to 2007.\n\n## Learning Design\n\nI was 14 and found myself fully immersed in the internet. Like many kids, I was an avid gamer. One of my favorites was Halo. I was on their gaming forums chatting with other Halo players. And for those around my age, you might remember something special at the bottom of every post - forum signature banners.\n\n<Image\n  alt={`Old forum banners`}\n  src={`/images/career/banners.webp`}\n  width={1280}\n  height={720}\n  priority\n/>\n\nThese were _so cool_. I thought \"I need to have one\". Luckily, I happened to grow up in the internet age. YouTube was getting popular and you could find tutorials on anything your heart desired.\n\nSo, 14-year-old me managed to follow the _sound_ advice of others online and download a _completely_ legal version of Photoshop (thanks Pirate Bay) to create my own banners. I learned about vectors, brush packs, masking, typography, you name it. And before I knew it, I was actually _pretty good_ at design.\n\n> **Takeaway:** Follow your curiosity.\n\n## Working as a Designer\n\nI continued to use my Photoshop skills mostly for practical jokes, like photoshopping my friends into epic landscapes or other silly things. When I turned 16, I was looking for a summer job and realized I had actually developed _marketable skills_ in the process of following my curiosity. A local t-shirt company was hiring designers to create vector illustrations for sports teams, events, schools, and more. You know, this kind.\n\n<Image\n  alt={`Shirt designs`}\n  src={`/images/career/shirts.webp`}\n  width={1280}\n  height={720}\n/>\n\nI applied, and surprisingly, I got hired. That summer, I churned out designs and learned more about Adobe Illustrator than I could have imagined. As high school graduation approached, it seemed natural I would continue with design in college (university). But a looming fear of a career as a designer led me to explore other options.\n\nI was worried about job stability and the intense cirriculum for designers at my college. In retrospect, I didn't have great guidance (easy to say in hindsight). Ultimately, I made the jump for engineering.\n\n> **Takeaway:** Chase your passions. You might just learn some valuable skills along the way.\n\n## Becoming an Engineer\n\nI started college and learned to code in 2011. I chose Computer Engineering because I built my own gaming computer once, and I was the \"IT\" person for my friends and family. Not exactly a strong foundation to build a career upon.\n\nMy first class was _Introduction to Computer Programming_. My professor asked, \"How many have had prior programming experience?\". More than half the class raised their hands. My hand stayed down. I became nervous.\n\nI struggled throughout my first year of school, scraping by with average grades and low self-esteem. I wanted to quit. \"I'm not smart enough to be a programmer\", I thought. In hindsight, I was actually just _learning the wrong things for me_.\n\n## What Didn't Work For Me\n\nIn our curriculum, students started out by learning the C programming language. For me, C was not the most enjoyable language to work with. I would be fine never having to manually allocate memory ever again. The only part that sparked joy was visualizing command line output.\n\n```c\n#include <stdio.h>\n\nint main( int argc, char *argv[] )  {\n   if( argc == 2 ) {\n      printf(\"The argument supplied is %s\\\\n\", argv[1]);\n   }\n   else if( argc > 2 ) {\n      printf(\"Too many arguments supplied.\\\\n\");\n   }\n   else {\n      printf(\"One argument expected.\\\\n\");\n   }\n}\n```\n\nFor example, if I ran the program above and forwarded `hello` on the command line, I'd see `The argument supplied is hello`. Incredible! While I dreaded almost everything about C, it did start teaching me the fundamentals of programming: variables, loops, functions, and more.\n\nNext, we learned Java. This was a big improvement over C for me. No more [manual memory management](<https://en.wikipedia.org/wiki/Garbage_collection_(computer_science)>)! And even more visual applications: [Java Swing](<https://en.wikipedia.org/wiki/Swing_(Java)>). Now we're talking!\n\n<Image\n  alt={`Java Swing program`}\n  src={`/images/career/swing.webp`}\n  width={1280}\n  height={720}\n/>\n\nThe next semester we learned web development. This is where the pieces began to fall into place for me. The visual aspect of the web felt like the missing link between design and development. The web felt like a place I could experiment, build, and most importantly **share with anyone**.\n\n> **Takeaway:** To learn what's right for you, cast a wide net. Try many things.\n\n## Humble Beginnings\n\nEven though I was excited about the web, building web apps in 2012 wasn't as beginner-friendly as it is today. I learned HTML, CSS, JavaScript, jQuery, and even that [Bootstrap](<https://en.wikipedia.org/wiki/Bootstrap_(front-end_framework)>) library. Simple websites made sense, but then I was exposed to the world of back-end development... what in the world is a LAMP stack!? [Impostor syndrome](https://en.wikipedia.org/wiki/Impostor_syndrome) reared its ugly head again.\n\n<Image\n  alt={`LAMP stack`}\n  src={`/images/career/lamp.webp`}\n  width={1280}\n  height={401}\n/>\n\nNevertheless, I passed my web development classes with higher marks and ended up landing an internship. It wasn't exactly what I wanted -- I was writing automated tests. But I got my foot in the door. I started to learn what a career as a Software Engineer looked like.\n\nOne internship led to two, and then three, and finally a full-time job after graduating [with honors](https://en.wiktionary.org/wiki/cum_laude). Quite a turnaround from wanting to drop out and quit programming just a few years prior. My determination and perseverance paid off.\n\n> **Takeaway:** You're not a failure if your first job isn't at a well-known company. Every company will teach you something new about how to build software.\n\n## Exponential Growth\n\n<StaticTweet id=\"826528907381739520\" />\n\nWhile I enjoyed web development, the front-end never _fully clicked_ for me until I started using React a few years later in my first full-time job. Up until this point, most \"modern web development\" at the time seemed so complex. Learning React, and then starting to use Create React App, helped me finally break free from JavaScript build tool hell and focus on building great websites. This is when I started to grow exponentially as a developer.\n\n<Image\n  alt={`Anatomy of a React component`}\n  src={`/images/career/react-dark.webp`}\n  width={1280}\n  height={720}\n/>\n\nSpecializing on one specific thing (React) led to a snowball effect. Suddenly, I was becoming proficient in other related skills. Understanding the fundamentals led to faster adoption of the next layer of tools, and finally to understanding and creating my own backends and APIs.\n\n> **Takeaway:** Learning React is a safe bet. The principles of React have fundamentally changed how we build for the web.\n\n## The Present\n\nI've now been working with React since 2015. Since then I've largely been a product engineer, working in financial tech and e-commerce. About three years ago, I realized I wanted to make a shift in my career.\n\nI wanted to create. I wanted to write, record, stream, post, tweet, and grow a community. I wanted to help others learn and progress in their careers as developers. After teaching over 100,000 developers from around the world with courses and tutorials, I joined the team at Vercel and now lead [Developer Relations](https://arifin.xyz/notes/head-of-devrel).\n\n> **Takeaway:** It's never too late to change your trajectory. Your career is a marathon, not a sprint.\n\n## Takeaways & Advice\n\n1. Follow your curiosity.\n1. Chase your passions. You might just learn some valuable skills along the way.\n1. To learn what's right for you, cast a wide net. Try many things.\n1. You're not a failure if your first job isn't at a well-known company. Every company will teach you something new about how to build software. You'll probably only be working there for a few years anyway, on average at least.\n1. Learning React is a safe bet. The principles of React have fundamentally changed how we build for the web.\n1. It's never too late to change your trajectory. Your career is a marathon, not a sprint.\n\nAlso, share your work. Tell people what you're building or learning. It sounds obvious, but learning in public and sharing my findings helped me land multiple jobs in my career.\n\n<StaticTweet id=\"1334334544598740994\" />\n\n- A good boot camp is better than an average degree (for programming).\n- You don't need formal education, but if you forego traditional structure and community, you must recreate it yourself.\n- Create an [online presence](/notes/beginners-guide-to-the-programming-portfolio#why-do-you-need-a-portfolio). Showcase your work. [Write](/notes/teach-online#writing-online). Share what you've learned. Attract other like-minded people. Create serendipity.\n\nThe best time to start was yesterday. The second best time is today.\n"
  },
  {
    "slug": "css-with-react",
    "wordCount": 1305,
    "readTime": "6 min read",
    "data": {
      "title": "How Should I Style My React Application?",
      "date": "2020-09-14",
      "summary": "Learn how CSS has evolved and explore pros and cons of different styling solutions for React."
    },
    "content": "\nReact attempts to be as unopinionated as possible. This is both it's greatest strength _and_ weakness.\n\nOver the years, I've tried many different ways to style my React apps. Each solution has its pros and cons.\nThis article will share my journey using CSS with React and how it's evolved to its current state. Then, I'll discuss pros/cons of\ndifferent approaches for styling.\n\n## Vanilla CSS\n\nLike most, I started web development with vanilla CSS. All you need is a single HTML and CSS file. Pretty simple.\n\n```html title=\"index.html\"\n<h1 class=\"header\">Welcome</h1>\n```\n\n```css title=\"index.css\"\n.header {\n  font-size: 32px;\n}\n```\n\nAs I built more large applications, I began to understand some of the drawbacks.\n\n- **Reusability.**¬†It's easy to create append-only stylesheets that become very complex.\n- **Global Namespace.**¬†Since CSS has a [global namespace](https://css-tricks.com/regarding-css-global-scope/), you can unintentionally target too many elements.\n- **Colocation.** It's hard to modularize your CSS, which makes it difficult to delete code safely.\n\nAt this point, I was introduced to [CSS pre-processors](https://developer.mozilla.org/en-US/docs/Glossary/CSS_preprocessor).\nThese tools aim to introduce new funtionality and compile back to vanilla CSS.\n\n## Sass\n\n[Sass](https://sass-lang.com/), one of the most popular preprocessors, allows you to write more reusable, maintainable CSS.\nSome of the most popular features are [variables](https://sass-lang.com/documentation/variables), [mixins](https://sass-lang.com/documentation/at-rules/mixin), and [modules](https://sass-lang.com/documentation/modules).\n\n- **Variables.**¬†I want to define global values once and share them throughout my stylesheets.\n- **Mixins.**¬†I want to reuse particular snippets of CSS.\n- **Modules.**¬†I want to split up my CSS files for a more maintainable codebase.\n\n```scss title=\"_base.scss\"\n$font-stack: Helvetica, sans-serif;\n$primary-color: #333;\n\nbody {\n  font: 100% $font-stack;\n  color: $primary-color;\n}\n```\n\n```scss title=\"_header.scss\"\n@use \"base\";\n\n.header {\n  font-size: 32px;\n}\n```\n\nSass helped me write more modular, reusable CSS ‚Äì at least, for a while. Over time, I ran into new issues.\n\n- **Naming.**¬†As your CSS grows, it's easy to have class names get out of hand.\n- **Browser support.**¬†Certain features aren't [supported across all browsers](https://caniuse.com/) and require [vendor prefixes](https://developer.mozilla.org/en-US/docs/Glossary/Vendor_Prefix) like `-moz-` (Firefox), `-webkit-` (Safari), and `-ms-` (Internet Explorer and Edge).\n\nTo solve naming, I started to adopt¬†[BEM](http://getbem.com/introduction/).\nBlock Element Modifier is a methodology that helps you to create reusable components\nand organize CSS in a modular way, which keeps specificity low.\n\n```html\n<button class=\"button\">Cancel</button>\n<button class=\"button button--primary\">Submit</button>\n```\n\n```css\n.button {\n  color: black;\n  background-color: gray;\n}\n\n.button--primary {\n  color: white;\n  background-color: green;\n}\n```\n\nNaming conventions helped but didn't fix the root cause:¬†**naming is hard**.\nFor browser support, it's possible to set up your Sass toolchain with a tool like¬†[autoprefixer](https://css-tricks.com/autoprefixer/)¬†to handle vendor prefixes.\nHowever, around this time, I started using component-based frameworks like React. This led me to explore CSS-in-JS.\n\n## CSS-in-JS\n\nI started using CSS-in-JS when building a component library. At first, CSS-in-JS solved all my problems.\n\n- **Specificity** is solved by auto-generated class names.\n- **Colocation** is solved by putting CSS directly with the component, making it easy to delete code.\n- **Browser support**¬†is solved by having autoprefixer built-in.\n- **Variables**¬†are solved by creating a global theme.\n\nHowever, **naming** was still a huge pain.\n\nAs the component library grew, I began to explore [Theme UI](https://theme-ui.com) and [styled-system](https://styled-system.com/).\nThese were more structured approaches to scaling CSS-in-JS to help enforce a design system.\nPlus, they helped solve¬†naming. Trying to scale [styled-components](https://styled-components.com/) alone in a large application made me get _really_ creative with names.\nYou can only have so many container, wrapper, layout things. For example:\n\n```js\nconst HomeContainerWrapper = styled.div`\n¬† ¬†padding: 8px;\n¬† ¬†font-weight: bold;\n¬† ¬†color: white;\n¬† ¬†background: blue;\n`;\n\n<HomeContainerWrapper>\n¬†¬†Hello\n</HomeContainerWrapper>\n\n// Forget about naming\n<Box\n¬†¬†padding={3}\n¬†¬†fontWeight='bold'\n¬†¬†color='white'\n¬†¬†bg='blue'\n>\n¬†¬†Hello\n</Box>\n```\n\nNow, I know what you're thinking. Inline styles ü§Æ. I'll admit, I wasn't sold at first. But it grew on me ‚Äì and that brings us to now.\n\n## Current State\n\nI've recently been working with [CSS Modules](https://github.com/css-modules/css-modules) and [Tailwind CSS](https://tailwindcss.com/).\nBoth of these approaches to styling React applications have prompted me to step back and evaluate the ecosystem.\n\nBelow, I've summarized pros and cons of various approaches to styling your React application. I tried to make this comparison as unopinionated as possible.\nThe choice that's best for you likely depends on:\n\n- Your experience (stick with what you know).\n- Your team.\n- The size of your application.\n- What you're trying to build.\n\n## Pros and Cons\n\n### Vanilla CSS\n\n<ProsCard\n  title=\"vanilla CSS\"\n  pros={[\n    `You don't want to add a toolchain. Vanilla CSS works with every browser & language.`,\n  ]}\n/>\n\n<ConsCard\n  title=\"vanilla CSS\"\n  cons={[`You're building a large web application.`]}\n/>\n\n### CSS Modules\n\n[CSS Modules](https://github.com/css-modules/css-modules) would be my choice for smaller teams that don't need to share\ncomponents across applications.\n\n[Next.js](https://nextjs.org) has support for CSS Modules, which means you don't have to worry about setting up [Webpack](https://webpack.js.org/).\nIt also sets up [autoprefixer](https://css-tricks.com/autoprefixer/) making CSS Modules an attractive alternative to CSS-in-JS in some cases.\n\n<ProsCard\n  title=\"CSS modules\"\n  pros={[\n    \"You want class names scoped to the corresponding component.\",\n    \"You want to use CSS variables to reuse values.\",\n    \"You need your application to work without JavaScript.\",\n    \"You want the lowest barrier to entry.\",\n    \"You want to use any language, not just JavaScript.\",\n  ]}\n/>\n\n<ConsCard\n  title=\"CSS modules\"\n  cons={[\n    `You don't want to configure a toolchain like Webpack.`,\n    \"You need to distribute a package on NPM.\",\n    \"You want nesting support by default (requires PostCSS).\",\n    `You don't want to context switch between files.`,\n  ]}\n/>\n\n### CSS-in-JS\n\nThere's many different CSS-in-JS libraries. The two most popular are [styled-components](https://styled-components.com/) and [Emotion](https://emotion.sh/docs/introduction).\n\nThere's also zero-runtime solutions like [Linaria](https://github.com/callstack/linaria), where CSS is extracted to CSS files at build-time.\nTo see comparisons between different libraries, see [CSS-in-JS benchmarks.](https://github.com/A-gambit/CSS-IN-JS-Benchmarks)\n\n<ProsCard\n  title=\"CSS-in-JS\"\n  pros={[\n    \"You want to distribute as reusable components on NPM.\",\n    \"You want to take advantage of anything in the JavaScript ecosystem.\",\n    \"You want to colocate styles with components, making it easy to delete code.\",\n    \"You need to support multiple themes.\",\n  ]}\n/>\n\n<ConsCard\n  title=\"CSS-in-JS\"\n  cons={[\n    `You don't want to configure a toolchain like Webpack.`,\n    \"You are sick of figuring out names for things.\",\n    \"You believe it breaks separation of concerns.\",\n    `You don't want to enforce all consumers must use the same CSS-in-JS solution.`,\n  ]}\n/>\n\n### Theme UI / Styled System\n\nBoth [Theme UI](https://theme-ui.com) and [styled-system](https://styled-system.com/) abide by the [System UI theme specification](https://system-ui.com/).\nThis specification intends to help make UI components, libraries, and tools as interoperable as possible.\n\nThe primary use case for these libraries is implenting a component library and design system.\nOne of my favorite libraries is [Chakra UI](https://next.chakra-ui.com/).\n\n<ProsCard\n  title=\"Theme UI / styled-system\"\n  pros={[\n    `You're building a component library.`,\n    \"You need to enforce a design system.\",\n    \"You want to spend less time trying to name components.\",\n  ]}\n/>\n\n<ConsCard\n  title=\"Theme UI / styled-system\"\n  cons={[\n    \"You dislike providing styles as props.\",\n    \"You believe it breaks separation of concerns.\",\n  ]}\n/>\n\n### Tailwind CSS\n\n[Tailwind CSS](https://tailwindcss.com/) has been rapidly growing in popularity. Many people are frustrated with the bloat of CSS frameworks like\n[Bootstrap](https://getbootstrap.com/) and want an alternative. Tailwind provides an impressive developer experience with a refined API.\n\nWith the combination of [Tailwind UI](https://tailwindui.com/), you can easily build extensible, well-designed applications.\n\n<ProsCard\n  title=\"Tailwind\"\n  pros={[\n    \"You want to never leave your HTML (or JSX).\",\n    \"You need to enforce a design system.\",\n    \"You want to spend less time trying to name components.\",\n  ]}\n/>\n\n<ConsCard\n  title=\"Tailwind\"\n  cons={[\n    `You don't want (potentially) long class names.`,\n    `You don't want to learn Tailwind syntax, which is slightly different than standard CSS.`,\n  ]}\n/>\n\n## Conclusion\n\nI hope this article has helped demystify styling your React applications. Did I miss anything or see something you'd change?\nLeave a comment below or reach out on [Twitter](https://twitter.com/vmprmyth).\n\n## Further Reading\n\n- [What are CSS Modules and why do we need them?](https://css-tricks.com/css-modules-part-1-need/)\n- [The Cost of JavaScript in 2019](https://v8.dev/notes/cost-of-javascript-2019)\n- [CSS-in-JS library comparisons](https://github.com/andreipfeiffer/css-in-js)\n- [Refactoring an alert component from CSS to CSS-in-JS](https://alert-refactor.netlify.app/)\n- [Two Steps Forward, One Step Back](https://jxnblk.com/notes/two-steps-forward/)\n"
  },
  {
    "slug": "beginners-guide-to-the-programming-portfolio",
    "wordCount": 386,
    "readTime": "3 min read",
    "data": {
      "title": "Programming Portfolios",
      "date": "2017-02-24",
      "summary": "Tips for creating a portfolio that stands out."
    },
    "content": "\nEvery programmer should have a portfolio. When I'm hiring, I want to see what you've built. I want to see your code. I want to see how you write.\n\n<Image\n  alt={`Google`}\n  src={`/images/content-marketing-personal-brand/google.webp`}\n  width={1190}\n  height={108}\n  unoptimized\n/>\n\nThose who had a portfolio on their resume where I could learn more about them, their projects, and the code they've written were more likely to get a response from me when interviewing.\n\n## Why write?\n\nAfter finishing my post, [How Stripe Designs Beautiful Websites](/notes/how-stripe-designs-beautiful-websites), I posted a link to the article on [Reddit](https://www.reddit.com/) and [Hacker News](https://news.ycombinator.com/).\n\n<Image\n  alt={`Article Initially Posted`}\n  src={`/images/content-marketing-personal-brand/originally-posted.webp`}\n  width={1913}\n  height={589}\n/>\n\nI was immediately receiving 10x the traffic to my site as before. The article ended up hitting #1 on Hacker News and [/r/web_design](https://www.reddit.com/r/web_design/).\n\n<Image\n  alt={`#1 Reddit Article`}\n  src={`/images/content-marketing-personal-brand/reddit.webp`}\n  width={1680}\n  height={184}\n/>\n\nThis ultimately led to the article being reposted across a bunch of different websites. It continued to grow organically throughout the day, bringing in ~70,000 views in 24 hours.\n\n<Image\n  alt={`Article Initially Posted`}\n  src={`/images/content-marketing-personal-brand/final-views.webp`}\n  width={955}\n  height={472}\n/>\n\nThis traffic created two notable events:\n\n- My average site traffic doubled\n- My portfolio moved from the 3rd page of Google to the 1st\n\n## What to include\n\n- **Show code:** Ideally links to GitHub repositories, including live demo URLs where I can see the things you've built. I'll go explore the codebase and see what tech choices you used. Bonus points if you wrote about _why_ you picked that tech stack.\n- **Write stuff:** An average engineer who can write well and explain concepts clearly is better than an excellent engineer who can't communicate with their coworkers. Show me you are a clear writer, which is especially important if the role is remote.\n- **Own your SEO:** Google yourself and make sure you own the first page (not always easy, but worth influencing). Capture a domain name and build credibility. You might end up keeping that \"digital home\" throughout your career.\n- **Make it unique:** Express yourself. Use a creative design. Spent the extra hour on the [animation polish](https://delba.dev/notes/a-like-button-that-likes-you-back). Add something unique you haven't seen others do before.\n- **Show, don't tell:** You _said_ you have experience with React ‚Äì show me.\n\nWant to get started? [Clone and deploy](https://vercel.com/templates/notes) an example here, buy a domain, and you're online in less than five minutes.\n"
  }
]
